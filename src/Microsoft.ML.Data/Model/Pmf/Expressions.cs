// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: expressions.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LotusvNext.Expressions {

  /// <summary>Holder for reflection information generated from expressions.proto</summary>
  public static partial class ExpressionsReflection {

    #region Descriptor
    /// <summary>File descriptor for expressions.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExpressionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFleHByZXNzaW9ucy5wcm90bxIKTG90dXN2TmV4dBoOb25ueC1tbC5wcm90",
            "bzMaC3R5cGVzLnByb3RvIpgNCgpWYWx1ZVByb3RvEikKDGRlbnNlX3RlbnNv",
            "chgBIAEoCzIRLm9ubnguVGVuc29yUHJvdG9IABJBCg1zcGFyc2VfdGVuc29y",
            "GAIgASgLMiguTG90dXN2TmV4dC5WYWx1ZVByb3RvLlNwYXJzZVRlbnNvclBy",
            "b3RvSAASNAoGcmVjb3JkGAMgASgLMiIuTG90dXN2TmV4dC5WYWx1ZVByb3Rv",
            "LlJlY29yZFByb3RvSAASMwoDc2VxGAQgASgLMiQuTG90dXN2TmV4dC5WYWx1",
            "ZVByb3RvLlNlcXVlbmNlUHJvdG9IABIyCgV0dXBsZRgFIAEoCzIhLkxvdHVz",
            "dk5leHQuVmFsdWVQcm90by5UdXBsZVByb3RvSAASLgoDbWFwGAYgASgLMh8u",
            "TG90dXN2TmV4dC5WYWx1ZVByb3RvLk1hcFByb3RvSAASOwoKc2NhbGFyX21h",
            "cBgHIAEoCzIlLkxvdHVzdk5leHQuVmFsdWVQcm90by5TY2FsYXJNYXBQcm90",
            "b0gAEjEKCm51bGxfdmFsdWUYCCABKAsyGy5Mb3R1c3ZOZXh0LlZhbHVlUHJv",
            "dG8uTnVsbEgAEhEKB2ludGVnZXIYCSABKANIABIQCgZzdHJpbmcYCiABKAlI",
            "ABIRCgdib29sZWFuGAwgASgISAASDwoFZmxvYXQYDSABKAFIABIxCgdjb21w",
            "bGV4GA4gASgLMh4uTG90dXN2TmV4dC5WYWx1ZVByb3RvLkNvbXBsZXhIABI/",
            "CghpbnRlZ2VycxgPIAEoCzIrLkxvdHVzdk5leHQuVmFsdWVQcm90by5JbnRl",
            "Z2VyU2VxdWVuY2VQcm90b0gAEjsKBmZsb2F0cxgQIAEoCzIpLkxvdHVzdk5l",
            "eHQuVmFsdWVQcm90by5GbG9hdFNlcXVlbmNlUHJvdG9IABI9CgdzdHJpbmdz",
            "GBEgASgLMiouTG90dXN2TmV4dC5WYWx1ZVByb3RvLlN0cmluZ1NlcXVlbmNl",
            "UHJvdG9IABIjCgR0eXBlGBIgASgLMhUuTG90dXN2TmV4dC5UeXBlUHJvdG8a",
            "VAoHQ29tcGxleBIMCgRyZWFsGAEgASgBEhEKCWltYWdpbmFyeRgCIAEoARIo",
            "CgR0eXBlGAMgASgOMhoub25ueC5UZW5zb3JQcm90by5EYXRhVHlwZRp8ChFL",
            "ZXlWYWx1ZVBhaXJQcm90bxILCgFzGAEgASgJSAASDQoDaTMyGAIgASgFSAAS",
            "DQoDaTY0GAMgASgDSAASDgoEdWk2NBgEIAEoBEgAEiUKBXZhbHVlGGQgASgL",
            "MhYuTG90dXN2TmV4dC5WYWx1ZVByb3RvQgUKA2tleRpIChJOYW1lVmFsdWVQ",
            "YWlyUHJvdG8SCwoDa2V5GAEgASgJEiUKBXZhbHVlGGQgASgLMhYuTG90dXN2",
            "TmV4dC5WYWx1ZVByb3RvGkgKC1JlY29yZFByb3RvEjkKBmZpZWxkcxgBIAMo",
            "CzIpLkxvdHVzdk5leHQuVmFsdWVQcm90by5OYW1lVmFsdWVQYWlyUHJvdG8a",
            "TQoITWFwUHJvdG8SQQoPa2V5X3ZhbHVlX3BhaXJzGAEgAygLMiguTG90dXN2",
            "TmV4dC5WYWx1ZVByb3RvLktleVZhbHVlUGFpclByb3RvGlQKDlNjYWxhck1h",
            "cFByb3RvEh8KBGtleXMYASADKAsyES5vbm54LlRlbnNvclByb3RvEiEKBnZh",
            "bHVlcxgCIAMoCzIRLm9ubnguVGVuc29yUHJvdG8aBgoETnVsbBo2Cg1TZXF1",
            "ZW5jZVByb3RvEiUKBWVsZW1zGAEgAygLMhYuTG90dXN2TmV4dC5WYWx1ZVBy",
            "b3RvGiYKFEludGVnZXJTZXF1ZW5jZVByb3RvEg4KBnZhbHVlcxgBIAMoAxok",
            "ChJGbG9hdFNlcXVlbmNlUHJvdG8SDgoGdmFsdWVzGAEgAygBGiUKE1N0cmlu",
            "Z1NlcXVlbmNlUHJvdG8SDgoGdmFsdWVzGAEgAygJGjQKClR1cGxlUHJvdG8S",
            "JgoGdmFsdWVzGAEgAygLMhYuTG90dXN2TmV4dC5WYWx1ZVByb3RvGn4KEVNw",
            "YXJzZVRlbnNvclByb3RvEgwKBGRpbXMYBCADKAMSLAoRbm9uX3plcm9fZWxl",
            "bWVudHMYASABKAsyES5vbm54LlRlbnNvclByb3RvEhUKDWZpcnN0X2luZGlj",
            "ZXMYAiADKAMSFgoOY29sdW1uX2luZGljZXMYAyADKANCBwoFdmFsdWUi8wEK",
            "BkxhbWJkYRI+CgxpbnB1dF9wYXJhbXMYASADKAsyKC5Mb3R1c3ZOZXh0LlR5",
            "cGVQcm90by5QYXJhbWV0ZXJEZWNsUHJvdG8SPwoNb3V0cHV0X3BhcmFtcxgC",
            "IAMoCzIoLkxvdHVzdk5leHQuVHlwZVByb3RvLlBhcmFtZXRlckRlY2xQcm90",
            "bxJCChBpbnB1dF9hdHRyaWJ1dGVzGAMgAygLMiguTG90dXN2TmV4dC5UeXBl",
            "UHJvdG8uUGFyYW1ldGVyRGVjbFByb3RvEiQKBGJvZHkYBSADKAsyFi5Mb3R1",
            "c3ZOZXh0LkV4cHJlc3Npb24iIQoRVmFyaWFibGVSZWZlcmVuY2USDAoEbmFt",
            "ZRgBIAEoCSIhChFGdW5jdGlvblJlZmVyZW5jZRIMCgRuYW1lGAEgASgJIjEK",
            "Dk1vZGVsUmVmZXJlbmNlEgwKBG5hbWUYASABKAkSEQoJbmFtZXNwYWNlGAIg",
            "ASgJIusBCgRDYWxsEiYKBnRhcmdldBgBIAEoCzIWLkxvdHVzdk5leHQuRXhw",
            "cmVzc2lvbhIqCgpwb3NpdGlvbmFsGAIgAygLMhYuTG90dXN2TmV4dC5FeHBy",
            "ZXNzaW9uEjQKCmF0dHJpYnV0ZXMYAyADKAsyIC5Mb3R1c3ZOZXh0LkNhbGwu",
            "QXR0cmlidXRlc0VudHJ5Eg4KBm91dHB1dBgEIAMoCRpJCg9BdHRyaWJ1dGVz",
            "RW50cnkSCwoDa2V5GAEgASgJEiUKBXZhbHVlGAIgASgLMhYuTG90dXN2TmV4",
            "dC5FeHByZXNzaW9uOgI4ASJjCgVBcnJheRImCgZ2YWx1ZXMYASADKAsyFi5M",
            "b3R1c3ZOZXh0LkV4cHJlc3Npb24SMgoKYXJyYXlfdHlwZRgCIAEoCzIeLkxv",
            "dHVzdk5leHQuVHlwZVByb3RvLlNlcXVlbmNlIi8KBVR1cGxlEiYKBnZhbHVl",
            "cxgBIAMoCzIWLkxvdHVzdk5leHQuRXhwcmVzc2lvbiKAAQoDTWFwEiQKBGtl",
            "eXMYASADKAsyFi5Mb3R1c3ZOZXh0LkV4cHJlc3Npb24SJgoGdmFsdWVzGAIg",
            "AygLMhYuTG90dXN2TmV4dC5FeHByZXNzaW9uEisKCG1hcF90eXBlGAMgASgL",
            "MhkuTG90dXN2TmV4dC5UeXBlUHJvdG8uTWFwIqoBCgZSZWNvcmQSKQoKcmVj",
            "b3JkVHlwZRgBIAEoCzIVLkxvdHVzdk5leHQuVHlwZVByb3RvEi4KBnZhbHVl",
            "cxgCIAMoCzIeLkxvdHVzdk5leHQuUmVjb3JkLlZhbHVlc0VudHJ5GkUKC1Zh",
            "bHVlc0VudHJ5EgsKA2tleRgBIAEoCRIlCgV2YWx1ZRgCIAEoCzIWLkxvdHVz",
            "dk5leHQuRXhwcmVzc2lvbjoCOAEigQEKBlRlbnNvchIoCghuZXdfdHlwZRgB",
            "IAEoCzIWLm9ubnguVHlwZVByb3RvLlRlbnNvchIlCgVzaGFwZRgCIAMoCzIW",
            "LkxvdHVzdk5leHQuRXhwcmVzc2lvbhImCgZ2YWx1ZXMYAyADKAsyFi5Mb3R1",
            "c3ZOZXh0LkV4cHJlc3Npb24iiQEKDUVsZW1lbnRBY2Nlc3MSKQoJY29udGFp",
            "bmVyGAEgASgLMhYuTG90dXN2TmV4dC5FeHByZXNzaW9uEicKB2RlZmF1bHQY",
            "AiABKAsyFi5Mb3R1c3ZOZXh0LkV4cHJlc3Npb24SJAoEcGF0aBgDIAMoCzIW",
            "LkxvdHVzdk5leHQuRXhwcmVzc2lvbiJMChFSZWNvcmRGaWVsZEFjY2VzcxIp",
            "Cgljb250YWluZXIYASABKAsyFi5Mb3R1c3ZOZXh0LkV4cHJlc3Npb24SDAoE",
            "cGF0aBgDIAMoCSJKCg9UdXBsZUl0ZW1BY2Nlc3MSKQoJY29udGFpbmVyGAEg",
            "ASgLMhYuTG90dXN2TmV4dC5FeHByZXNzaW9uEgwKBHBhdGgYAyADKAMiwAEK",
            "BENvbmQSKQoIYnJhbmNoZXMYASADKAsyFy5Mb3R1c3ZOZXh0LkNvbmQuSWZU",
            "aGVuEisKC2Vsc2VfY2xhdXNlGAIgAygLMhYuTG90dXN2TmV4dC5FeHByZXNz",
            "aW9uGmAKBklmVGhlbhIpCgljb25kaXRpb24YASABKAsyFi5Mb3R1c3ZOZXh0",
            "LkV4cHJlc3Npb24SKwoLdGhlbl9jbGF1c2UYAiADKAsyFi5Mb3R1c3ZOZXh0",
            "LkV4cHJlc3Npb24iWwoCSWYSKAoHaWZfdGhlbhgBIAEoCzIXLkxvdHVzdk5l",
            "eHQuQ29uZC5JZlRoZW4SKwoLZWxzZV9jbGF1c2UYAiADKAsyFi5Mb3R1c3ZO",
            "ZXh0LkV4cHJlc3Npb24iYgoJSWZOb3ROdWxsEigKB2lmX3RoZW4YASABKAsy",
            "Fy5Mb3R1c3ZOZXh0LkNvbmQuSWZUaGVuEisKC2Vsc2VfY2xhdXNlGAMgAygL",
            "MhYuTG90dXN2TmV4dC5FeHByZXNzaW9uIoEBCgNMZXQSMgoRdmFyaWFibGVf",
            "YmluZGluZ3MYASADKAsyFy5Mb3R1c3ZOZXh0LkxldC5CaW5kaW5nGkYKB0Jp",
            "bmRpbmcSDAoEbmFtZRgBIAEoCRItCg1pbml0aWFsX3ZhbHVlGAIgASgLMhYu",
            "TG90dXN2TmV4dC5FeHByZXNzaW9uIjoKA1NldBIMCgRuYW1lGAEgASgJEiUK",
            "BXZhbHVlGAIgASgLMhYuTG90dXN2TmV4dC5FeHByZXNzaW9uIioKAkRvEiQK",
            "BGJvZHkYASADKAsyFi5Mb3R1c3ZOZXh0LkV4cHJlc3Npb24iWAoFV2hpbGUS",
            "KQoJY29uZGl0aW9uGAEgASgLMhYuTG90dXN2TmV4dC5FeHByZXNzaW9uEiQK",
            "BGJvZHkYAiADKAsyFi5Mb3R1c3ZOZXh0LkV4cHJlc3Npb24iqwEKA0ZvchI0",
            "ChNpbmR1Y3Rpb25fdmFyaWFibGVzGAEgAygLMhcuTG90dXN2TmV4dC5MZXQu",
            "QmluZGluZxIpCgljb25kaXRpb24YAiABKAsyFi5Mb3R1c3ZOZXh0LkV4cHJl",
            "c3Npb24SJAoEYm9keRgDIAMoCzIWLkxvdHVzdk5leHQuRXhwcmVzc2lvbhId",
            "CgRzdGVwGAQgAygLMg8uTG90dXN2TmV4dC5TZXQiawoHRm9yRWFjaBIQCgh2",
            "YXJpYWJsZRgBIAEoCRIoCghzZXF1ZW5jZRgCIAEoCzIWLkxvdHVzdk5leHQu",
            "RXhwcmVzc2lvbhIkCgRib2R5GAMgAygLMhYuTG90dXN2TmV4dC5FeHByZXNz",
            "aW9uIhoKB0NvbW1lbnQSDwoHY29tbWVudBgBIAMoCSI+CgNMb2cSJAoEZXhw",
            "chgBIAMoCzIWLkxvdHVzdk5leHQuRXhwcmVzc2lvbhIRCgluYW1lc3BhY2UY",
            "AiABKAki4AcKCkV4cHJlc3Npb24SKQoHbGl0ZXJhbBgBIAEoCzIWLkxvdHVz",
            "dk5leHQuVmFsdWVQcm90b0gAEjEKCHZhcmlhYmxlGAMgASgLMh0uTG90dXN2",
            "TmV4dC5WYXJpYWJsZVJlZmVyZW5jZUgAEjAKB2Z1bmNyZWYYBCABKAsyHS5M",
            "b3R1c3ZOZXh0LkZ1bmN0aW9uUmVmZXJlbmNlSAASJAoGbGFtYmRhGAUgASgL",
            "MhIuTG90dXN2TmV4dC5MYW1iZGFIABIgCgRjYWxsGAYgASgLMhAuTG90dXN2",
            "TmV4dC5DYWxsSAASIgoFYXJyYXkYByABKAsyES5Mb3R1c3ZOZXh0LkFycmF5",
            "SAASHgoDbWFwGAggASgLMg8uTG90dXN2TmV4dC5NYXBIABIkCgZyZWNvcmQY",
            "CSABKAsyEi5Mb3R1c3ZOZXh0LlJlY29yZEgAEiQKBnRlbnNvchgKIAEoCzIS",
            "LkxvdHVzdk5leHQuVGVuc29ySAASIgoFdHVwbGUYCyABKAsyES5Mb3R1c3ZO",
            "ZXh0LlR1cGxlSAASKgoFaW5kZXgYDCABKAsyGS5Mb3R1c3ZOZXh0LkVsZW1l",
            "bnRBY2Nlc3NIABIuCgVmaWVsZBgNIAEoCzIdLkxvdHVzdk5leHQuUmVjb3Jk",
            "RmllbGRBY2Nlc3NIABIrCgRpdGVtGA4gASgLMhsuTG90dXN2TmV4dC5UdXBs",
            "ZUl0ZW1BY2Nlc3NIABIgCgRjb25kGA8gASgLMhAuTG90dXN2TmV4dC5Db25k",
            "SAASIQoHaWZfdGhlbhgQIAEoCzIOLkxvdHVzdk5leHQuSWZIABIsCgtpZl9u",
            "b3RfbnVsbBgRIAEoCzIVLkxvdHVzdk5leHQuSWZOb3ROdWxsSAASLgoIbW9k",
            "ZWxyZWYYEiABKAsyGi5Mb3R1c3ZOZXh0Lk1vZGVsUmVmZXJlbmNlSAASHgoD",
            "bGV0GBMgASgLMg8uTG90dXN2TmV4dC5MZXRIABIeCgNzZXQYFCABKAsyDy5M",
            "b3R1c3ZOZXh0LlNldEgAEhwKAmRvGBUgASgLMg4uTG90dXN2TmV4dC5Eb0gA",
            "EiIKBXdoaWxlGBYgASgLMhEuTG90dXN2TmV4dC5XaGlsZUgAEh4KA2ZvchgX",
            "IAEoCzIPLkxvdHVzdk5leHQuRm9ySAASJwoIZm9yX2VhY2gYGCABKAsyEy5M",
            "b3R1c3ZOZXh0LkZvckVhY2hIABImCgdjb21tZW50GBkgASgLMhMuTG90dXN2",
            "TmV4dC5Db21tZW50SAASHgoDbG9nGBogASgLMg8uTG90dXN2TmV4dC5Mb2dI",
            "AEIHCgV2YWx1ZUIZqgIWTG90dXN2TmV4dC5FeHByZXNzaW9uc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ONNX.OnnxMlReflection.Descriptor, global::LotusvNext.Types.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto), global::LotusvNext.Expressions.ValueProto.Parser, new[]{ "DenseTensor", "SparseTensor", "Record", "Seq", "Tuple", "Map", "ScalarMap", "NullValue", "Integer", "String", "Boolean", "Float", "Complex", "Integers", "Floats", "Strings", "Type" }, new[]{ "Value" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.Complex), global::LotusvNext.Expressions.ValueProto.Types.Complex.Parser, new[]{ "Real", "Imaginary", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.KeyValuePairProto), global::LotusvNext.Expressions.ValueProto.Types.KeyValuePairProto.Parser, new[]{ "S", "I32", "I64", "Ui64", "Value" }, new[]{ "Key" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.NameValuePairProto), global::LotusvNext.Expressions.ValueProto.Types.NameValuePairProto.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.RecordProto), global::LotusvNext.Expressions.ValueProto.Types.RecordProto.Parser, new[]{ "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.MapProto), global::LotusvNext.Expressions.ValueProto.Types.MapProto.Parser, new[]{ "KeyValuePairs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.ScalarMapProto), global::LotusvNext.Expressions.ValueProto.Types.ScalarMapProto.Parser, new[]{ "Keys", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.Null), global::LotusvNext.Expressions.ValueProto.Types.Null.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.SequenceProto), global::LotusvNext.Expressions.ValueProto.Types.SequenceProto.Parser, new[]{ "Elems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.IntegerSequenceProto), global::LotusvNext.Expressions.ValueProto.Types.IntegerSequenceProto.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.FloatSequenceProto), global::LotusvNext.Expressions.ValueProto.Types.FloatSequenceProto.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.StringSequenceProto), global::LotusvNext.Expressions.ValueProto.Types.StringSequenceProto.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.TupleProto), global::LotusvNext.Expressions.ValueProto.Types.TupleProto.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ValueProto.Types.SparseTensorProto), global::LotusvNext.Expressions.ValueProto.Types.SparseTensorProto.Parser, new[]{ "Dims", "NonZeroElements", "FirstIndices", "ColumnIndices" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Lambda), global::LotusvNext.Expressions.Lambda.Parser, new[]{ "InputParams", "OutputParams", "InputAttributes", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.VariableReference), global::LotusvNext.Expressions.VariableReference.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.FunctionReference), global::LotusvNext.Expressions.FunctionReference.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ModelReference), global::LotusvNext.Expressions.ModelReference.Parser, new[]{ "Name", "Namespace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Call), global::LotusvNext.Expressions.Call.Parser, new[]{ "Target", "Positional", "Attributes", "Output" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Array), global::LotusvNext.Expressions.Array.Parser, new[]{ "Values", "ArrayType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Tuple), global::LotusvNext.Expressions.Tuple.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Map), global::LotusvNext.Expressions.Map.Parser, new[]{ "Keys", "Values", "MapType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Record), global::LotusvNext.Expressions.Record.Parser, new[]{ "RecordType", "Values" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Tensor), global::LotusvNext.Expressions.Tensor.Parser, new[]{ "NewType", "Shape", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ElementAccess), global::LotusvNext.Expressions.ElementAccess.Parser, new[]{ "Container", "Default", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.RecordFieldAccess), global::LotusvNext.Expressions.RecordFieldAccess.Parser, new[]{ "Container", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.TupleItemAccess), global::LotusvNext.Expressions.TupleItemAccess.Parser, new[]{ "Container", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Cond), global::LotusvNext.Expressions.Cond.Parser, new[]{ "Branches", "ElseClause" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Cond.Types.IfThen), global::LotusvNext.Expressions.Cond.Types.IfThen.Parser, new[]{ "Condition", "ThenClause" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.If), global::LotusvNext.Expressions.If.Parser, new[]{ "IfThen", "ElseClause" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.IfNotNull), global::LotusvNext.Expressions.IfNotNull.Parser, new[]{ "IfThen", "ElseClause" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Let), global::LotusvNext.Expressions.Let.Parser, new[]{ "VariableBindings" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Let.Types.Binding), global::LotusvNext.Expressions.Let.Types.Binding.Parser, new[]{ "Name", "InitialValue" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Set), global::LotusvNext.Expressions.Set.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Do), global::LotusvNext.Expressions.Do.Parser, new[]{ "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.While), global::LotusvNext.Expressions.While.Parser, new[]{ "Condition", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.For), global::LotusvNext.Expressions.For.Parser, new[]{ "InductionVariables", "Condition", "Body", "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.ForEach), global::LotusvNext.Expressions.ForEach.Parser, new[]{ "Variable", "Sequence", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Comment), global::LotusvNext.Expressions.Comment.Parser, new[]{ "Comment_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Log), global::LotusvNext.Expressions.Log.Parser, new[]{ "Expr", "Namespace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Expressions.Expression), global::LotusvNext.Expressions.Expression.Parser, new[]{ "Literal", "Variable", "Funcref", "Lambda", "Call", "Array", "Map", "Record", "Tensor", "Tuple", "Index", "Field", "Item", "Cond", "IfThen", "IfNotNull", "Modelref", "Let", "Set", "Do", "While", "For", "ForEach", "Comment", "Log" }, new[]{ "Value" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ValueProto : pb::IMessage<ValueProto> {
    private static readonly pb::MessageParser<ValueProto> _parser = new pb::MessageParser<ValueProto>(() => new ValueProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueProto(ValueProto other) : this() {
      Type = other.type_ != null ? other.Type.Clone() : null;
      switch (other.ValueCase) {
        case ValueOneofCase.DenseTensor:
          DenseTensor = other.DenseTensor.Clone();
          break;
        case ValueOneofCase.SparseTensor:
          SparseTensor = other.SparseTensor.Clone();
          break;
        case ValueOneofCase.Record:
          Record = other.Record.Clone();
          break;
        case ValueOneofCase.Seq:
          Seq = other.Seq.Clone();
          break;
        case ValueOneofCase.Tuple:
          Tuple = other.Tuple.Clone();
          break;
        case ValueOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case ValueOneofCase.ScalarMap:
          ScalarMap = other.ScalarMap.Clone();
          break;
        case ValueOneofCase.NullValue:
          NullValue = other.NullValue.Clone();
          break;
        case ValueOneofCase.Integer:
          Integer = other.Integer;
          break;
        case ValueOneofCase.String:
          String = other.String;
          break;
        case ValueOneofCase.Boolean:
          Boolean = other.Boolean;
          break;
        case ValueOneofCase.Float:
          Float = other.Float;
          break;
        case ValueOneofCase.Complex:
          Complex = other.Complex.Clone();
          break;
        case ValueOneofCase.Integers:
          Integers = other.Integers.Clone();
          break;
        case ValueOneofCase.Floats:
          Floats = other.Floats.Clone();
          break;
        case ValueOneofCase.Strings:
          Strings = other.Strings.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueProto Clone() {
      return new ValueProto(this);
    }

    /// <summary>Field number for the "dense_tensor" field.</summary>
    public const int DenseTensorFieldNumber = 1;
    /// <summary>
    /// A dense tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ONNX.TensorProto DenseTensor {
      get { return valueCase_ == ValueOneofCase.DenseTensor ? (global::ONNX.TensorProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DenseTensor;
      }
    }

    /// <summary>Field number for the "sparse_tensor" field.</summary>
    public const int SparseTensorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.SparseTensorProto SparseTensor {
      get { return valueCase_ == ValueOneofCase.SparseTensor ? (global::LotusvNext.Expressions.ValueProto.Types.SparseTensorProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SparseTensor;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 3;
    /// <summary>
    /// A record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.RecordProto Record {
      get { return valueCase_ == ValueOneofCase.Record ? (global::LotusvNext.Expressions.ValueProto.Types.RecordProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Record;
      }
    }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 4;
    /// <summary>
    /// A sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.SequenceProto Seq {
      get { return valueCase_ == ValueOneofCase.Seq ? (global::LotusvNext.Expressions.ValueProto.Types.SequenceProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Seq;
      }
    }

    /// <summary>Field number for the "tuple" field.</summary>
    public const int TupleFieldNumber = 5;
    /// <summary>
    /// A tuple.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.TupleProto Tuple {
      get { return valueCase_ == ValueOneofCase.Tuple ? (global::LotusvNext.Expressions.ValueProto.Types.TupleProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Tuple;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 6;
    /// <summary>
    /// A map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.MapProto Map {
      get { return valueCase_ == ValueOneofCase.Map ? (global::LotusvNext.Expressions.ValueProto.Types.MapProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Map;
      }
    }

    /// <summary>Field number for the "scalar_map" field.</summary>
    public const int ScalarMapFieldNumber = 7;
    /// <summary>
    /// A scalar map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.ScalarMapProto ScalarMap {
      get { return valueCase_ == ValueOneofCase.ScalarMap ? (global::LotusvNext.Expressions.ValueProto.Types.ScalarMapProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.ScalarMap;
      }
    }

    /// <summary>Field number for the "null_value" field.</summary>
    public const int NullValueFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.Null NullValue {
      get { return valueCase_ == ValueOneofCase.NullValue ? (global::LotusvNext.Expressions.ValueProto.Types.Null) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.NullValue;
      }
    }

    /// <summary>Field number for the "integer" field.</summary>
    public const int IntegerFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Integer {
      get { return valueCase_ == ValueOneofCase.Integer ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Integer;
      }
    }

    /// <summary>Field number for the "string" field.</summary>
    public const int StringFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string String {
      get { return valueCase_ == ValueOneofCase.String ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.String;
      }
    }

    /// <summary>Field number for the "boolean" field.</summary>
    public const int BooleanFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Boolean {
      get { return valueCase_ == ValueOneofCase.Boolean ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Boolean;
      }
    }

    /// <summary>Field number for the "float" field.</summary>
    public const int FloatFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Float {
      get { return valueCase_ == ValueOneofCase.Float ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Float;
      }
    }

    /// <summary>Field number for the "complex" field.</summary>
    public const int ComplexFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.Complex Complex {
      get { return valueCase_ == ValueOneofCase.Complex ? (global::LotusvNext.Expressions.ValueProto.Types.Complex) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Complex;
      }
    }

    /// <summary>Field number for the "integers" field.</summary>
    public const int IntegersFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.IntegerSequenceProto Integers {
      get { return valueCase_ == ValueOneofCase.Integers ? (global::LotusvNext.Expressions.ValueProto.Types.IntegerSequenceProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Integers;
      }
    }

    /// <summary>Field number for the "floats" field.</summary>
    public const int FloatsFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.FloatSequenceProto Floats {
      get { return valueCase_ == ValueOneofCase.Floats ? (global::LotusvNext.Expressions.ValueProto.Types.FloatSequenceProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Floats;
      }
    }

    /// <summary>Field number for the "strings" field.</summary>
    public const int StringsFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto.Types.StringSequenceProto Strings {
      get { return valueCase_ == ValueOneofCase.Strings ? (global::LotusvNext.Expressions.ValueProto.Types.StringSequenceProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Strings;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 18;
    private global::LotusvNext.Types.TypeProto type_;
    /// <summary>
    /// This is optional for some values, where the type can be computed 
    /// from the types of elements. It is required when that isn't the case.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      DenseTensor = 1,
      SparseTensor = 2,
      Record = 3,
      Seq = 4,
      Tuple = 5,
      Map = 6,
      ScalarMap = 7,
      NullValue = 8,
      Integer = 9,
      String = 10,
      Boolean = 12,
      Float = 13,
      Complex = 14,
      Integers = 15,
      Floats = 16,
      Strings = 17,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DenseTensor, other.DenseTensor)) return false;
      if (!object.Equals(SparseTensor, other.SparseTensor)) return false;
      if (!object.Equals(Record, other.Record)) return false;
      if (!object.Equals(Seq, other.Seq)) return false;
      if (!object.Equals(Tuple, other.Tuple)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(ScalarMap, other.ScalarMap)) return false;
      if (!object.Equals(NullValue, other.NullValue)) return false;
      if (Integer != other.Integer) return false;
      if (String != other.String) return false;
      if (Boolean != other.Boolean) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Float, other.Float)) return false;
      if (!object.Equals(Complex, other.Complex)) return false;
      if (!object.Equals(Integers, other.Integers)) return false;
      if (!object.Equals(Floats, other.Floats)) return false;
      if (!object.Equals(Strings, other.Strings)) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.DenseTensor) hash ^= DenseTensor.GetHashCode();
      if (valueCase_ == ValueOneofCase.SparseTensor) hash ^= SparseTensor.GetHashCode();
      if (valueCase_ == ValueOneofCase.Record) hash ^= Record.GetHashCode();
      if (valueCase_ == ValueOneofCase.Seq) hash ^= Seq.GetHashCode();
      if (valueCase_ == ValueOneofCase.Tuple) hash ^= Tuple.GetHashCode();
      if (valueCase_ == ValueOneofCase.Map) hash ^= Map.GetHashCode();
      if (valueCase_ == ValueOneofCase.ScalarMap) hash ^= ScalarMap.GetHashCode();
      if (valueCase_ == ValueOneofCase.NullValue) hash ^= NullValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.Integer) hash ^= Integer.GetHashCode();
      if (valueCase_ == ValueOneofCase.String) hash ^= String.GetHashCode();
      if (valueCase_ == ValueOneofCase.Boolean) hash ^= Boolean.GetHashCode();
      if (valueCase_ == ValueOneofCase.Float) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Float);
      if (valueCase_ == ValueOneofCase.Complex) hash ^= Complex.GetHashCode();
      if (valueCase_ == ValueOneofCase.Integers) hash ^= Integers.GetHashCode();
      if (valueCase_ == ValueOneofCase.Floats) hash ^= Floats.GetHashCode();
      if (valueCase_ == ValueOneofCase.Strings) hash ^= Strings.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.DenseTensor) {
        output.WriteRawTag(10);
        output.WriteMessage(DenseTensor);
      }
      if (valueCase_ == ValueOneofCase.SparseTensor) {
        output.WriteRawTag(18);
        output.WriteMessage(SparseTensor);
      }
      if (valueCase_ == ValueOneofCase.Record) {
        output.WriteRawTag(26);
        output.WriteMessage(Record);
      }
      if (valueCase_ == ValueOneofCase.Seq) {
        output.WriteRawTag(34);
        output.WriteMessage(Seq);
      }
      if (valueCase_ == ValueOneofCase.Tuple) {
        output.WriteRawTag(42);
        output.WriteMessage(Tuple);
      }
      if (valueCase_ == ValueOneofCase.Map) {
        output.WriteRawTag(50);
        output.WriteMessage(Map);
      }
      if (valueCase_ == ValueOneofCase.ScalarMap) {
        output.WriteRawTag(58);
        output.WriteMessage(ScalarMap);
      }
      if (valueCase_ == ValueOneofCase.NullValue) {
        output.WriteRawTag(66);
        output.WriteMessage(NullValue);
      }
      if (valueCase_ == ValueOneofCase.Integer) {
        output.WriteRawTag(72);
        output.WriteInt64(Integer);
      }
      if (valueCase_ == ValueOneofCase.String) {
        output.WriteRawTag(82);
        output.WriteString(String);
      }
      if (valueCase_ == ValueOneofCase.Boolean) {
        output.WriteRawTag(96);
        output.WriteBool(Boolean);
      }
      if (valueCase_ == ValueOneofCase.Float) {
        output.WriteRawTag(105);
        output.WriteDouble(Float);
      }
      if (valueCase_ == ValueOneofCase.Complex) {
        output.WriteRawTag(114);
        output.WriteMessage(Complex);
      }
      if (valueCase_ == ValueOneofCase.Integers) {
        output.WriteRawTag(122);
        output.WriteMessage(Integers);
      }
      if (valueCase_ == ValueOneofCase.Floats) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Floats);
      }
      if (valueCase_ == ValueOneofCase.Strings) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Strings);
      }
      if (type_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.DenseTensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DenseTensor);
      }
      if (valueCase_ == ValueOneofCase.SparseTensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SparseTensor);
      }
      if (valueCase_ == ValueOneofCase.Record) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (valueCase_ == ValueOneofCase.Seq) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Seq);
      }
      if (valueCase_ == ValueOneofCase.Tuple) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
      }
      if (valueCase_ == ValueOneofCase.Map) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (valueCase_ == ValueOneofCase.ScalarMap) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalarMap);
      }
      if (valueCase_ == ValueOneofCase.NullValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NullValue);
      }
      if (valueCase_ == ValueOneofCase.Integer) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Integer);
      }
      if (valueCase_ == ValueOneofCase.String) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
      }
      if (valueCase_ == ValueOneofCase.Boolean) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.Float) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.Complex) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Complex);
      }
      if (valueCase_ == ValueOneofCase.Integers) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Integers);
      }
      if (valueCase_ == ValueOneofCase.Floats) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Floats);
      }
      if (valueCase_ == ValueOneofCase.Strings) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Strings);
      }
      if (type_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueProto other) {
      if (other == null) {
        return;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::LotusvNext.Types.TypeProto();
        }
        Type.MergeFrom(other.Type);
      }
      switch (other.ValueCase) {
        case ValueOneofCase.DenseTensor:
          if (DenseTensor == null) {
            DenseTensor = new global::ONNX.TensorProto();
          }
          DenseTensor.MergeFrom(other.DenseTensor);
          break;
        case ValueOneofCase.SparseTensor:
          if (SparseTensor == null) {
            SparseTensor = new global::LotusvNext.Expressions.ValueProto.Types.SparseTensorProto();
          }
          SparseTensor.MergeFrom(other.SparseTensor);
          break;
        case ValueOneofCase.Record:
          if (Record == null) {
            Record = new global::LotusvNext.Expressions.ValueProto.Types.RecordProto();
          }
          Record.MergeFrom(other.Record);
          break;
        case ValueOneofCase.Seq:
          if (Seq == null) {
            Seq = new global::LotusvNext.Expressions.ValueProto.Types.SequenceProto();
          }
          Seq.MergeFrom(other.Seq);
          break;
        case ValueOneofCase.Tuple:
          if (Tuple == null) {
            Tuple = new global::LotusvNext.Expressions.ValueProto.Types.TupleProto();
          }
          Tuple.MergeFrom(other.Tuple);
          break;
        case ValueOneofCase.Map:
          if (Map == null) {
            Map = new global::LotusvNext.Expressions.ValueProto.Types.MapProto();
          }
          Map.MergeFrom(other.Map);
          break;
        case ValueOneofCase.ScalarMap:
          if (ScalarMap == null) {
            ScalarMap = new global::LotusvNext.Expressions.ValueProto.Types.ScalarMapProto();
          }
          ScalarMap.MergeFrom(other.ScalarMap);
          break;
        case ValueOneofCase.NullValue:
          if (NullValue == null) {
            NullValue = new global::LotusvNext.Expressions.ValueProto.Types.Null();
          }
          NullValue.MergeFrom(other.NullValue);
          break;
        case ValueOneofCase.Integer:
          Integer = other.Integer;
          break;
        case ValueOneofCase.String:
          String = other.String;
          break;
        case ValueOneofCase.Boolean:
          Boolean = other.Boolean;
          break;
        case ValueOneofCase.Float:
          Float = other.Float;
          break;
        case ValueOneofCase.Complex:
          if (Complex == null) {
            Complex = new global::LotusvNext.Expressions.ValueProto.Types.Complex();
          }
          Complex.MergeFrom(other.Complex);
          break;
        case ValueOneofCase.Integers:
          if (Integers == null) {
            Integers = new global::LotusvNext.Expressions.ValueProto.Types.IntegerSequenceProto();
          }
          Integers.MergeFrom(other.Integers);
          break;
        case ValueOneofCase.Floats:
          if (Floats == null) {
            Floats = new global::LotusvNext.Expressions.ValueProto.Types.FloatSequenceProto();
          }
          Floats.MergeFrom(other.Floats);
          break;
        case ValueOneofCase.Strings:
          if (Strings == null) {
            Strings = new global::LotusvNext.Expressions.ValueProto.Types.StringSequenceProto();
          }
          Strings.MergeFrom(other.Strings);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::ONNX.TensorProto subBuilder = new global::ONNX.TensorProto();
            if (valueCase_ == ValueOneofCase.DenseTensor) {
              subBuilder.MergeFrom(DenseTensor);
            }
            input.ReadMessage(subBuilder);
            DenseTensor = subBuilder;
            break;
          }
          case 18: {
            global::LotusvNext.Expressions.ValueProto.Types.SparseTensorProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.SparseTensorProto();
            if (valueCase_ == ValueOneofCase.SparseTensor) {
              subBuilder.MergeFrom(SparseTensor);
            }
            input.ReadMessage(subBuilder);
            SparseTensor = subBuilder;
            break;
          }
          case 26: {
            global::LotusvNext.Expressions.ValueProto.Types.RecordProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.RecordProto();
            if (valueCase_ == ValueOneofCase.Record) {
              subBuilder.MergeFrom(Record);
            }
            input.ReadMessage(subBuilder);
            Record = subBuilder;
            break;
          }
          case 34: {
            global::LotusvNext.Expressions.ValueProto.Types.SequenceProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.SequenceProto();
            if (valueCase_ == ValueOneofCase.Seq) {
              subBuilder.MergeFrom(Seq);
            }
            input.ReadMessage(subBuilder);
            Seq = subBuilder;
            break;
          }
          case 42: {
            global::LotusvNext.Expressions.ValueProto.Types.TupleProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.TupleProto();
            if (valueCase_ == ValueOneofCase.Tuple) {
              subBuilder.MergeFrom(Tuple);
            }
            input.ReadMessage(subBuilder);
            Tuple = subBuilder;
            break;
          }
          case 50: {
            global::LotusvNext.Expressions.ValueProto.Types.MapProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.MapProto();
            if (valueCase_ == ValueOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 58: {
            global::LotusvNext.Expressions.ValueProto.Types.ScalarMapProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.ScalarMapProto();
            if (valueCase_ == ValueOneofCase.ScalarMap) {
              subBuilder.MergeFrom(ScalarMap);
            }
            input.ReadMessage(subBuilder);
            ScalarMap = subBuilder;
            break;
          }
          case 66: {
            global::LotusvNext.Expressions.ValueProto.Types.Null subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.Null();
            if (valueCase_ == ValueOneofCase.NullValue) {
              subBuilder.MergeFrom(NullValue);
            }
            input.ReadMessage(subBuilder);
            NullValue = subBuilder;
            break;
          }
          case 72: {
            Integer = input.ReadInt64();
            break;
          }
          case 82: {
            String = input.ReadString();
            break;
          }
          case 96: {
            Boolean = input.ReadBool();
            break;
          }
          case 105: {
            Float = input.ReadDouble();
            break;
          }
          case 114: {
            global::LotusvNext.Expressions.ValueProto.Types.Complex subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.Complex();
            if (valueCase_ == ValueOneofCase.Complex) {
              subBuilder.MergeFrom(Complex);
            }
            input.ReadMessage(subBuilder);
            Complex = subBuilder;
            break;
          }
          case 122: {
            global::LotusvNext.Expressions.ValueProto.Types.IntegerSequenceProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.IntegerSequenceProto();
            if (valueCase_ == ValueOneofCase.Integers) {
              subBuilder.MergeFrom(Integers);
            }
            input.ReadMessage(subBuilder);
            Integers = subBuilder;
            break;
          }
          case 130: {
            global::LotusvNext.Expressions.ValueProto.Types.FloatSequenceProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.FloatSequenceProto();
            if (valueCase_ == ValueOneofCase.Floats) {
              subBuilder.MergeFrom(Floats);
            }
            input.ReadMessage(subBuilder);
            Floats = subBuilder;
            break;
          }
          case 138: {
            global::LotusvNext.Expressions.ValueProto.Types.StringSequenceProto subBuilder = new global::LotusvNext.Expressions.ValueProto.Types.StringSequenceProto();
            if (valueCase_ == ValueOneofCase.Strings) {
              subBuilder.MergeFrom(Strings);
            }
            input.ReadMessage(subBuilder);
            Strings = subBuilder;
            break;
          }
          case 146: {
            if (type_ == null) {
              type_ = new global::LotusvNext.Types.TypeProto();
            }
            input.ReadMessage(type_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ValueProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Complex : pb::IMessage<Complex> {
        private static readonly pb::MessageParser<Complex> _parser = new pb::MessageParser<Complex>(() => new Complex());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Complex> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Complex() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Complex(Complex other) : this() {
          real_ = other.real_;
          imaginary_ = other.imaginary_;
          type_ = other.type_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Complex Clone() {
          return new Complex(this);
        }

        /// <summary>Field number for the "real" field.</summary>
        public const int RealFieldNumber = 1;
        private double real_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Real {
          get { return real_; }
          set {
            real_ = value;
          }
        }

        /// <summary>Field number for the "imaginary" field.</summary>
        public const int ImaginaryFieldNumber = 2;
        private double imaginary_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Imaginary {
          get { return imaginary_; }
          set {
            imaginary_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private global::ONNX.TensorProto.Types.DataType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ONNX.TensorProto.Types.DataType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Complex);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Complex other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Real, other.Real)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Imaginary, other.Imaginary)) return false;
          if (Type != other.Type) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Real != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Real);
          if (Imaginary != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Imaginary);
          if (Type != 0) hash ^= Type.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Real != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Real);
          }
          if (Imaginary != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Imaginary);
          }
          if (Type != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Real != 0D) {
            size += 1 + 8;
          }
          if (Imaginary != 0D) {
            size += 1 + 8;
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Complex other) {
          if (other == null) {
            return;
          }
          if (other.Real != 0D) {
            Real = other.Real;
          }
          if (other.Imaginary != 0D) {
            Imaginary = other.Imaginary;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Real = input.ReadDouble();
                break;
              }
              case 17: {
                Imaginary = input.ReadDouble();
                break;
              }
              case 24: {
                type_ = (global::ONNX.TensorProto.Types.DataType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class KeyValuePairProto : pb::IMessage<KeyValuePairProto> {
        private static readonly pb::MessageParser<KeyValuePairProto> _parser = new pb::MessageParser<KeyValuePairProto>(() => new KeyValuePairProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KeyValuePairProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyValuePairProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyValuePairProto(KeyValuePairProto other) : this() {
          Value = other.value_ != null ? other.Value.Clone() : null;
          switch (other.KeyCase) {
            case KeyOneofCase.S:
              S = other.S;
              break;
            case KeyOneofCase.I32:
              I32 = other.I32;
              break;
            case KeyOneofCase.I64:
              I64 = other.I64;
              break;
            case KeyOneofCase.Ui64:
              Ui64 = other.Ui64;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyValuePairProto Clone() {
          return new KeyValuePairProto(this);
        }

        /// <summary>Field number for the "s" field.</summary>
        public const int SFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string S {
          get { return keyCase_ == KeyOneofCase.S ? (string) key_ : ""; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            keyCase_ = KeyOneofCase.S;
          }
        }

        /// <summary>Field number for the "i32" field.</summary>
        public const int I32FieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int I32 {
          get { return keyCase_ == KeyOneofCase.I32 ? (int) key_ : 0; }
          set {
            key_ = value;
            keyCase_ = KeyOneofCase.I32;
          }
        }

        /// <summary>Field number for the "i64" field.</summary>
        public const int I64FieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long I64 {
          get { return keyCase_ == KeyOneofCase.I64 ? (long) key_ : 0L; }
          set {
            key_ = value;
            keyCase_ = KeyOneofCase.I64;
          }
        }

        /// <summary>Field number for the "ui64" field.</summary>
        public const int Ui64FieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Ui64 {
          get { return keyCase_ == KeyOneofCase.Ui64 ? (ulong) key_ : 0UL; }
          set {
            key_ = value;
            keyCase_ = KeyOneofCase.Ui64;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 100;
        private global::LotusvNext.Expressions.ValueProto value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Expressions.ValueProto Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        private object key_;
        /// <summary>Enum of possible cases for the "key" oneof.</summary>
        public enum KeyOneofCase {
          None = 0,
          S = 1,
          I32 = 2,
          I64 = 3,
          Ui64 = 4,
        }
        private KeyOneofCase keyCase_ = KeyOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KeyOneofCase KeyCase {
          get { return keyCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKey() {
          keyCase_ = KeyOneofCase.None;
          key_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KeyValuePairProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KeyValuePairProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (S != other.S) return false;
          if (I32 != other.I32) return false;
          if (I64 != other.I64) return false;
          if (Ui64 != other.Ui64) return false;
          if (!object.Equals(Value, other.Value)) return false;
          if (KeyCase != other.KeyCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (keyCase_ == KeyOneofCase.S) hash ^= S.GetHashCode();
          if (keyCase_ == KeyOneofCase.I32) hash ^= I32.GetHashCode();
          if (keyCase_ == KeyOneofCase.I64) hash ^= I64.GetHashCode();
          if (keyCase_ == KeyOneofCase.Ui64) hash ^= Ui64.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          hash ^= (int) keyCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (keyCase_ == KeyOneofCase.S) {
            output.WriteRawTag(10);
            output.WriteString(S);
          }
          if (keyCase_ == KeyOneofCase.I32) {
            output.WriteRawTag(16);
            output.WriteInt32(I32);
          }
          if (keyCase_ == KeyOneofCase.I64) {
            output.WriteRawTag(24);
            output.WriteInt64(I64);
          }
          if (keyCase_ == KeyOneofCase.Ui64) {
            output.WriteRawTag(32);
            output.WriteUInt64(Ui64);
          }
          if (value_ != null) {
            output.WriteRawTag(162, 6);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (keyCase_ == KeyOneofCase.S) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(S);
          }
          if (keyCase_ == KeyOneofCase.I32) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(I32);
          }
          if (keyCase_ == KeyOneofCase.I64) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(I64);
          }
          if (keyCase_ == KeyOneofCase.Ui64) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ui64);
          }
          if (value_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KeyValuePairProto other) {
          if (other == null) {
            return;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::LotusvNext.Expressions.ValueProto();
            }
            Value.MergeFrom(other.Value);
          }
          switch (other.KeyCase) {
            case KeyOneofCase.S:
              S = other.S;
              break;
            case KeyOneofCase.I32:
              I32 = other.I32;
              break;
            case KeyOneofCase.I64:
              I64 = other.I64;
              break;
            case KeyOneofCase.Ui64:
              Ui64 = other.Ui64;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                S = input.ReadString();
                break;
              }
              case 16: {
                I32 = input.ReadInt32();
                break;
              }
              case 24: {
                I64 = input.ReadInt64();
                break;
              }
              case 32: {
                Ui64 = input.ReadUInt64();
                break;
              }
              case 802: {
                if (value_ == null) {
                  value_ = new global::LotusvNext.Expressions.ValueProto();
                }
                input.ReadMessage(value_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class NameValuePairProto : pb::IMessage<NameValuePairProto> {
        private static readonly pb::MessageParser<NameValuePairProto> _parser = new pb::MessageParser<NameValuePairProto>(() => new NameValuePairProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NameValuePairProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameValuePairProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameValuePairProto(NameValuePairProto other) : this() {
          key_ = other.key_;
          Value = other.value_ != null ? other.Value.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NameValuePairProto Clone() {
          return new NameValuePairProto(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private string key_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 100;
        private global::LotusvNext.Expressions.ValueProto value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Expressions.ValueProto Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NameValuePairProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NameValuePairProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key.Length != 0) hash ^= Key.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Key);
          }
          if (value_ != null) {
            output.WriteRawTag(162, 6);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (value_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NameValuePairProto other) {
          if (other == null) {
            return;
          }
          if (other.Key.Length != 0) {
            Key = other.Key;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              value_ = new global::LotusvNext.Expressions.ValueProto();
            }
            Value.MergeFrom(other.Value);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Key = input.ReadString();
                break;
              }
              case 802: {
                if (value_ == null) {
                  value_ = new global::LotusvNext.Expressions.ValueProto();
                }
                input.ReadMessage(value_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Defines a record in its serialized format.
      /// A record is a sequence of one or more
      /// typed uniquely named values, which may be of different types.
      /// </summary>
      public sealed partial class RecordProto : pb::IMessage<RecordProto> {
        private static readonly pb::MessageParser<RecordProto> _parser = new pb::MessageParser<RecordProto>(() => new RecordProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordProto(RecordProto other) : this() {
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordProto Clone() {
          return new RecordProto(this);
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LotusvNext.Expressions.ValueProto.Types.NameValuePairProto> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.ValueProto.Types.NameValuePairProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto.Types.NameValuePairProto> fields_ = new pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto.Types.NameValuePairProto>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto.Types.NameValuePairProto> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RecordProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecordProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecordProto other) {
          if (other == null) {
            return;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Defines a map in its serialized format.
      /// A record is a sequence of zero or more
      /// key/value pairs all of which have unique
      /// keys
      /// </summary>
      public sealed partial class MapProto : pb::IMessage<MapProto> {
        private static readonly pb::MessageParser<MapProto> _parser = new pb::MessageParser<MapProto>(() => new MapProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MapProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapProto(MapProto other) : this() {
          keyValuePairs_ = other.keyValuePairs_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MapProto Clone() {
          return new MapProto(this);
        }

        /// <summary>Field number for the "key_value_pairs" field.</summary>
        public const int KeyValuePairsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LotusvNext.Expressions.ValueProto.Types.KeyValuePairProto> _repeated_keyValuePairs_codec
            = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.ValueProto.Types.KeyValuePairProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto.Types.KeyValuePairProto> keyValuePairs_ = new pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto.Types.KeyValuePairProto>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto.Types.KeyValuePairProto> KeyValuePairs {
          get { return keyValuePairs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MapProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MapProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!keyValuePairs_.Equals(other.keyValuePairs_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= keyValuePairs_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          keyValuePairs_.WriteTo(output, _repeated_keyValuePairs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += keyValuePairs_.CalculateSize(_repeated_keyValuePairs_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MapProto other) {
          if (other == null) {
            return;
          }
          keyValuePairs_.Add(other.keyValuePairs_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                keyValuePairs_.AddEntriesFrom(input, _repeated_keyValuePairs_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Alternate space-efficient encoding of map that MAY be used
      /// for maps whose value type is a scalar.
      /// </summary>
      public sealed partial class ScalarMapProto : pb::IMessage<ScalarMapProto> {
        private static readonly pb::MessageParser<ScalarMapProto> _parser = new pb::MessageParser<ScalarMapProto>(() => new ScalarMapProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ScalarMapProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScalarMapProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScalarMapProto(ScalarMapProto other) : this() {
          keys_ = other.keys_.Clone();
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScalarMapProto Clone() {
          return new ScalarMapProto(this);
        }

        /// <summary>Field number for the "keys" field.</summary>
        public const int KeysFieldNumber = 1;
        private static readonly pb::FieldCodec<global::ONNX.TensorProto> _repeated_keys_codec
            = pb::FieldCodec.ForMessage(10, global::ONNX.TensorProto.Parser);
        private readonly pbc::RepeatedField<global::ONNX.TensorProto> keys_ = new pbc::RepeatedField<global::ONNX.TensorProto>();
        /// <summary>
        /// keys.DataType must be an integral type or string
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::ONNX.TensorProto> Keys {
          get { return keys_; }
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::ONNX.TensorProto> _repeated_values_codec
            = pb::FieldCodec.ForMessage(18, global::ONNX.TensorProto.Parser);
        private readonly pbc::RepeatedField<global::ONNX.TensorProto> values_ = new pbc::RepeatedField<global::ONNX.TensorProto>();
        /// <summary>
        /// No restriction on data type, keys.length must equal values.length
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::ONNX.TensorProto> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ScalarMapProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ScalarMapProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!keys_.Equals(other.keys_)) return false;
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= keys_.GetHashCode();
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          keys_.WriteTo(output, _repeated_keys_codec);
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += keys_.CalculateSize(_repeated_keys_codec);
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ScalarMapProto other) {
          if (other == null) {
            return;
          }
          keys_.Add(other.keys_);
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                keys_.AddEntriesFrom(input, _repeated_keys_codec);
                break;
              }
              case 18: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Null : pb::IMessage<Null> {
        private static readonly pb::MessageParser<Null> _parser = new pb::MessageParser<Null>(() => new Null());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Null> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Null() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Null(Null other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Null Clone() {
          return new Null(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Null);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Null other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Null other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      /// <summary>
      /// Defines a general sequence value in its serialized format.
      /// A sequence is a list of zero or more
      /// tensors, maps, records, or subsequences.
      /// </summary>
      public sealed partial class SequenceProto : pb::IMessage<SequenceProto> {
        private static readonly pb::MessageParser<SequenceProto> _parser = new pb::MessageParser<SequenceProto>(() => new SequenceProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SequenceProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SequenceProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SequenceProto(SequenceProto other) : this() {
          elems_ = other.elems_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SequenceProto Clone() {
          return new SequenceProto(this);
        }

        /// <summary>Field number for the "elems" field.</summary>
        public const int ElemsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LotusvNext.Expressions.ValueProto> _repeated_elems_codec
            = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.ValueProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto> elems_ = new pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto> Elems {
          get { return elems_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SequenceProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SequenceProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!elems_.Equals(other.elems_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= elems_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          elems_.WriteTo(output, _repeated_elems_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += elems_.CalculateSize(_repeated_elems_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SequenceProto other) {
          if (other == null) {
            return;
          }
          elems_.Add(other.elems_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                elems_.AddEntriesFrom(input, _repeated_elems_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Space-efficient integer sequence literal.
      /// </summary>
      public sealed partial class IntegerSequenceProto : pb::IMessage<IntegerSequenceProto> {
        private static readonly pb::MessageParser<IntegerSequenceProto> _parser = new pb::MessageParser<IntegerSequenceProto>(() => new IntegerSequenceProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IntegerSequenceProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IntegerSequenceProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IntegerSequenceProto(IntegerSequenceProto other) : this() {
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IntegerSequenceProto Clone() {
          return new IntegerSequenceProto(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<long> _repeated_values_codec
            = pb::FieldCodec.ForInt64(10);
        private readonly pbc::RepeatedField<long> values_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IntegerSequenceProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IntegerSequenceProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IntegerSequenceProto other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Space-efficient float sequence literal.
      /// </summary>
      public sealed partial class FloatSequenceProto : pb::IMessage<FloatSequenceProto> {
        private static readonly pb::MessageParser<FloatSequenceProto> _parser = new pb::MessageParser<FloatSequenceProto>(() => new FloatSequenceProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FloatSequenceProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FloatSequenceProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FloatSequenceProto(FloatSequenceProto other) : this() {
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FloatSequenceProto Clone() {
          return new FloatSequenceProto(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<double> _repeated_values_codec
            = pb::FieldCodec.ForDouble(10);
        private readonly pbc::RepeatedField<double> values_ = new pbc::RepeatedField<double>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<double> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FloatSequenceProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FloatSequenceProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FloatSequenceProto other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 9: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Space-efficient string sequence literal.
      /// </summary>
      public sealed partial class StringSequenceProto : pb::IMessage<StringSequenceProto> {
        private static readonly pb::MessageParser<StringSequenceProto> _parser = new pb::MessageParser<StringSequenceProto>(() => new StringSequenceProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StringSequenceProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StringSequenceProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StringSequenceProto(StringSequenceProto other) : this() {
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StringSequenceProto Clone() {
          return new StringSequenceProto(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_values_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StringSequenceProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StringSequenceProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StringSequenceProto other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class TupleProto : pb::IMessage<TupleProto> {
        private static readonly pb::MessageParser<TupleProto> _parser = new pb::MessageParser<TupleProto>(() => new TupleProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TupleProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProto(TupleProto other) : this() {
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TupleProto Clone() {
          return new TupleProto(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LotusvNext.Expressions.ValueProto> _repeated_values_codec
            = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.ValueProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto> values_ = new pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Expressions.ValueProto> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TupleProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TupleProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TupleProto other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class SparseTensorProto : pb::IMessage<SparseTensorProto> {
        private static readonly pb::MessageParser<SparseTensorProto> _parser = new pb::MessageParser<SparseTensorProto>(() => new SparseTensorProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SparseTensorProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.ValueProto.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparseTensorProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparseTensorProto(SparseTensorProto other) : this() {
          dims_ = other.dims_.Clone();
          NonZeroElements = other.nonZeroElements_ != null ? other.NonZeroElements.Clone() : null;
          firstIndices_ = other.firstIndices_.Clone();
          columnIndices_ = other.columnIndices_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparseTensorProto Clone() {
          return new SparseTensorProto(this);
        }

        /// <summary>Field number for the "dims" field.</summary>
        public const int DimsFieldNumber = 4;
        private static readonly pb::FieldCodec<long> _repeated_dims_codec
            = pb::FieldCodec.ForInt64(34);
        private readonly pbc::RepeatedField<long> dims_ = new pbc::RepeatedField<long>();
        /// <summary>
        /// The shape of the tensor.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Dims {
          get { return dims_; }
        }

        /// <summary>Field number for the "non_zero_elements" field.</summary>
        public const int NonZeroElementsFieldNumber = 1;
        private global::ONNX.TensorProto nonZeroElements_;
        /// <summary>
        /// Sparse tensors are stored using the CSR (Yale) format, which is is described at: 
        /// https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_(CSR,_CRS_or_Yale_format).
        ///
        /// The data type of the tensor elements are determined from the 'A' tensor, which holds the non-zero elements.
        /// Note that for the purposes of encoding, only the first dimension is compressed, the rest are treated as 
        /// if the tensor were of two dimensions.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ONNX.TensorProto NonZeroElements {
          get { return nonZeroElements_; }
          set {
            nonZeroElements_ = value;
          }
        }

        /// <summary>Field number for the "first_indices" field.</summary>
        public const int FirstIndicesFieldNumber = 2;
        private static readonly pb::FieldCodec<long> _repeated_firstIndices_codec
            = pb::FieldCodec.ForInt64(18);
        private readonly pbc::RepeatedField<long> firstIndices_ = new pbc::RepeatedField<long>();
        /// <summary>
        /// This is the IA array, which stores the index in NZE of the
        /// first non-zero element in row i. If there are m rows, this
        /// array is m+1 elements long.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> FirstIndices {
          get { return firstIndices_; }
        }

        /// <summary>Field number for the "column_indices" field.</summary>
        public const int ColumnIndicesFieldNumber = 3;
        private static readonly pb::FieldCodec<long> _repeated_columnIndices_codec
            = pb::FieldCodec.ForInt64(26);
        private readonly pbc::RepeatedField<long> columnIndices_ = new pbc::RepeatedField<long>();
        /// <summary>
        /// This is the JA array, which stores the column index of
        /// each element. It must be the same length as the NZE tensor.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> ColumnIndices {
          get { return columnIndices_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SparseTensorProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SparseTensorProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!dims_.Equals(other.dims_)) return false;
          if (!object.Equals(NonZeroElements, other.NonZeroElements)) return false;
          if(!firstIndices_.Equals(other.firstIndices_)) return false;
          if(!columnIndices_.Equals(other.columnIndices_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= dims_.GetHashCode();
          if (nonZeroElements_ != null) hash ^= NonZeroElements.GetHashCode();
          hash ^= firstIndices_.GetHashCode();
          hash ^= columnIndices_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (nonZeroElements_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(NonZeroElements);
          }
          firstIndices_.WriteTo(output, _repeated_firstIndices_codec);
          columnIndices_.WriteTo(output, _repeated_columnIndices_codec);
          dims_.WriteTo(output, _repeated_dims_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += dims_.CalculateSize(_repeated_dims_codec);
          if (nonZeroElements_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NonZeroElements);
          }
          size += firstIndices_.CalculateSize(_repeated_firstIndices_codec);
          size += columnIndices_.CalculateSize(_repeated_columnIndices_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SparseTensorProto other) {
          if (other == null) {
            return;
          }
          dims_.Add(other.dims_);
          if (other.nonZeroElements_ != null) {
            if (nonZeroElements_ == null) {
              nonZeroElements_ = new global::ONNX.TensorProto();
            }
            NonZeroElements.MergeFrom(other.NonZeroElements);
          }
          firstIndices_.Add(other.firstIndices_);
          columnIndices_.Add(other.columnIndices_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (nonZeroElements_ == null) {
                  nonZeroElements_ = new global::ONNX.TensorProto();
                }
                input.ReadMessage(nonZeroElements_);
                break;
              }
              case 18:
              case 16: {
                firstIndices_.AddEntriesFrom(input, _repeated_firstIndices_codec);
                break;
              }
              case 26:
              case 24: {
                columnIndices_.AddEntriesFrom(input, _repeated_columnIndices_codec);
                break;
              }
              case 34:
              case 32: {
                dims_.AddEntriesFrom(input, _repeated_dims_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Lambda : pb::IMessage<Lambda> {
    private static readonly pb::MessageParser<Lambda> _parser = new pb::MessageParser<Lambda>(() => new Lambda());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lambda> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lambda() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lambda(Lambda other) : this() {
      inputParams_ = other.inputParams_.Clone();
      outputParams_ = other.outputParams_.Clone();
      inputAttributes_ = other.inputAttributes_.Clone();
      body_ = other.body_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lambda Clone() {
      return new Lambda(this);
    }

    /// <summary>Field number for the "input_params" field.</summary>
    public const int InputParamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> _repeated_inputParams_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> inputParams_ = new pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto>();
    /// <summary>
    /// The formal input parameters to the operation or function 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> InputParams {
      get { return inputParams_; }
    }

    /// <summary>Field number for the "output_params" field.</summary>
    public const int OutputParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> _repeated_outputParams_codec
        = pb::FieldCodec.ForMessage(18, global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> outputParams_ = new pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto>();
    /// <summary>
    /// The formal output parameters to the operation or function 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> OutputParams {
      get { return outputParams_; }
    }

    /// <summary>Field number for the "input_attributes" field.</summary>
    public const int InputAttributesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> _repeated_inputAttributes_codec
        = pb::FieldCodec.ForMessage(26, global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> inputAttributes_ = new pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto>();
    /// <summary>
    /// The declaration of expected attributes to the operation or function 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> InputAttributes {
      get { return inputAttributes_; }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 5;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_body_codec
        = pb::FieldCodec.ForMessage(42, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> body_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    /// <summary>
    /// The body of a (non-external) function is a list of expressions. The last
    /// expression determines the output value and type. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Body {
      get { return body_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lambda);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lambda other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inputParams_.Equals(other.inputParams_)) return false;
      if(!outputParams_.Equals(other.outputParams_)) return false;
      if(!inputAttributes_.Equals(other.inputAttributes_)) return false;
      if(!body_.Equals(other.body_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inputParams_.GetHashCode();
      hash ^= outputParams_.GetHashCode();
      hash ^= inputAttributes_.GetHashCode();
      hash ^= body_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputParams_.WriteTo(output, _repeated_inputParams_codec);
      outputParams_.WriteTo(output, _repeated_outputParams_codec);
      inputAttributes_.WriteTo(output, _repeated_inputAttributes_codec);
      body_.WriteTo(output, _repeated_body_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inputParams_.CalculateSize(_repeated_inputParams_codec);
      size += outputParams_.CalculateSize(_repeated_outputParams_codec);
      size += inputAttributes_.CalculateSize(_repeated_inputAttributes_codec);
      size += body_.CalculateSize(_repeated_body_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lambda other) {
      if (other == null) {
        return;
      }
      inputParams_.Add(other.inputParams_);
      outputParams_.Add(other.outputParams_);
      inputAttributes_.Add(other.inputAttributes_);
      body_.Add(other.body_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputParams_.AddEntriesFrom(input, _repeated_inputParams_codec);
            break;
          }
          case 18: {
            outputParams_.AddEntriesFrom(input, _repeated_outputParams_codec);
            break;
          }
          case 26: {
            inputAttributes_.AddEntriesFrom(input, _repeated_inputAttributes_codec);
            break;
          }
          case 42: {
            body_.AddEntriesFrom(input, _repeated_body_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VariableReference : pb::IMessage<VariableReference> {
    private static readonly pb::MessageParser<VariableReference> _parser = new pb::MessageParser<VariableReference>(() => new VariableReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VariableReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableReference(VariableReference other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VariableReference Clone() {
      return new VariableReference(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VariableReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VariableReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VariableReference other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FunctionReference : pb::IMessage<FunctionReference> {
    private static readonly pb::MessageParser<FunctionReference> _parser = new pb::MessageParser<FunctionReference>(() => new FunctionReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FunctionReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionReference(FunctionReference other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FunctionReference Clone() {
      return new FunctionReference(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FunctionReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FunctionReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FunctionReference other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModelReference : pb::IMessage<ModelReference> {
    private static readonly pb::MessageParser<ModelReference> _parser = new pb::MessageParser<ModelReference>(() => new ModelReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelReference(ModelReference other) : this() {
      name_ = other.name_;
      namespace_ = other.namespace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelReference Clone() {
      return new ModelReference(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Namespace != other.Namespace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelReference other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Call : pb::IMessage<Call> {
    private static readonly pb::MessageParser<Call> _parser = new pb::MessageParser<Call>(() => new Call());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Call> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Call() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Call(Call other) : this() {
      Target = other.target_ != null ? other.Target.Clone() : null;
      positional_ = other.positional_.Clone();
      attributes_ = other.attributes_.Clone();
      output_ = other.output_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Call Clone() {
      return new Call(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::LotusvNext.Expressions.Expression target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "positional" field.</summary>
    public const int PositionalFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_positional_codec
        = pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> positional_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Positional {
      get { return positional_; }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 3;
    private static readonly pbc::MapField<string, global::LotusvNext.Expressions.Expression>.Codec _map_attributes_codec
        = new pbc::MapField<string, global::LotusvNext.Expressions.Expression>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser), 26);
    private readonly pbc::MapField<string, global::LotusvNext.Expressions.Expression> attributes_ = new pbc::MapField<string, global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::LotusvNext.Expressions.Expression> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "output" field.</summary>
    public const int OutputFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_output_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> output_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Output {
      get { return output_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Call);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Call other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if(!positional_.Equals(other.positional_)) return false;
      if (!Attributes.Equals(other.Attributes)) return false;
      if(!output_.Equals(other.output_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      hash ^= positional_.GetHashCode();
      hash ^= Attributes.GetHashCode();
      hash ^= output_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      positional_.WriteTo(output, _repeated_positional_codec);
      attributes_.WriteTo(output, _map_attributes_codec);
      output_.WriteTo(output, _repeated_output_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      size += positional_.CalculateSize(_repeated_positional_codec);
      size += attributes_.CalculateSize(_map_attributes_codec);
      size += output_.CalculateSize(_repeated_output_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Call other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::LotusvNext.Expressions.Expression();
        }
        Target.MergeFrom(other.Target);
      }
      positional_.Add(other.positional_);
      attributes_.Add(other.attributes_);
      output_.Add(other.output_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(target_);
            break;
          }
          case 18: {
            positional_.AddEntriesFrom(input, _repeated_positional_codec);
            break;
          }
          case 26: {
            attributes_.AddEntriesFrom(input, _map_attributes_codec);
            break;
          }
          case 34: {
            output_.AddEntriesFrom(input, _repeated_output_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Array : pb::IMessage<Array> {
    private static readonly pb::MessageParser<Array> _parser = new pb::MessageParser<Array>(() => new Array());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Array> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Array() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Array(Array other) : this() {
      values_ = other.values_.Clone();
      ArrayType = other.arrayType_ != null ? other.ArrayType.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Array Clone() {
      return new Array(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> values_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "array_type" field.</summary>
    public const int ArrayTypeFieldNumber = 2;
    private global::LotusvNext.Types.TypeProto.Types.Sequence arrayType_;
    /// <summary>
    /// The type is required when creating an empty array only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Sequence ArrayType {
      get { return arrayType_; }
      set {
        arrayType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Array);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Array other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      if (!object.Equals(ArrayType, other.ArrayType)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (arrayType_ != null) hash ^= ArrayType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (arrayType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ArrayType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (arrayType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArrayType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Array other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.arrayType_ != null) {
        if (arrayType_ == null) {
          arrayType_ = new global::LotusvNext.Types.TypeProto.Types.Sequence();
        }
        ArrayType.MergeFrom(other.ArrayType);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 18: {
            if (arrayType_ == null) {
              arrayType_ = new global::LotusvNext.Types.TypeProto.Types.Sequence();
            }
            input.ReadMessage(arrayType_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tuple : pb::IMessage<Tuple> {
    private static readonly pb::MessageParser<Tuple> _parser = new pb::MessageParser<Tuple>(() => new Tuple());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tuple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple(Tuple other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple Clone() {
      return new Tuple(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> values_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tuple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tuple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tuple other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Map : pb::IMessage<Map> {
    private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map(Map other) : this() {
      keys_ = other.keys_.Clone();
      values_ = other.values_.Clone();
      MapType = other.mapType_ != null ? other.MapType.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map Clone() {
      return new Map(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> keys_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Keys {
      get { return keys_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_values_codec
        = pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> values_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "map_type" field.</summary>
    public const int MapTypeFieldNumber = 3;
    private global::LotusvNext.Types.TypeProto.Types.Map mapType_;
    /// <summary>
    /// The type is required when creating an empty map only.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Map MapType {
      get { return mapType_; }
      set {
        mapType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      if(!values_.Equals(other.values_)) return false;
      if (!object.Equals(MapType, other.MapType)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      hash ^= values_.GetHashCode();
      if (mapType_ != null) hash ^= MapType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
      values_.WriteTo(output, _repeated_values_codec);
      if (mapType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MapType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      size += values_.CalculateSize(_repeated_values_codec);
      if (mapType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
      values_.Add(other.values_);
      if (other.mapType_ != null) {
        if (mapType_ == null) {
          mapType_ = new global::LotusvNext.Types.TypeProto.Types.Map();
        }
        MapType.MergeFrom(other.MapType);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 18: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 26: {
            if (mapType_ == null) {
              mapType_ = new global::LotusvNext.Types.TypeProto.Types.Map();
            }
            input.ReadMessage(mapType_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Record : pb::IMessage<Record> {
    private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record(Record other) : this() {
      RecordType = other.recordType_ != null ? other.RecordType.Clone() : null;
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Record Clone() {
      return new Record(this);
    }

    /// <summary>Field number for the "recordType" field.</summary>
    public const int RecordTypeFieldNumber = 1;
    private global::LotusvNext.Types.TypeProto recordType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto RecordType {
      get { return recordType_; }
      set {
        recordType_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::LotusvNext.Expressions.Expression>.Codec _map_values_codec
        = new pbc::MapField<string, global::LotusvNext.Expressions.Expression>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser), 18);
    private readonly pbc::MapField<string, global::LotusvNext.Expressions.Expression> values_ = new pbc::MapField<string, global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::LotusvNext.Expressions.Expression> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RecordType, other.RecordType)) return false;
      if (!Values.Equals(other.Values)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (recordType_ != null) hash ^= RecordType.GetHashCode();
      hash ^= Values.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (recordType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RecordType);
      }
      values_.WriteTo(output, _map_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (recordType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordType);
      }
      size += values_.CalculateSize(_map_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Record other) {
      if (other == null) {
        return;
      }
      if (other.recordType_ != null) {
        if (recordType_ == null) {
          recordType_ = new global::LotusvNext.Types.TypeProto();
        }
        RecordType.MergeFrom(other.RecordType);
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (recordType_ == null) {
              recordType_ = new global::LotusvNext.Types.TypeProto();
            }
            input.ReadMessage(recordType_);
            break;
          }
          case 18: {
            values_.AddEntriesFrom(input, _map_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tensor : pb::IMessage<Tensor> {
    private static readonly pb::MessageParser<Tensor> _parser = new pb::MessageParser<Tensor>(() => new Tensor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tensor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tensor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tensor(Tensor other) : this() {
      NewType = other.newType_ != null ? other.NewType.Clone() : null;
      shape_ = other.shape_.Clone();
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tensor Clone() {
      return new Tensor(this);
    }

    /// <summary>Field number for the "new_type" field.</summary>
    public const int NewTypeFieldNumber = 1;
    private global::ONNX.TypeProto.Types.Tensor newType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ONNX.TypeProto.Types.Tensor NewType {
      get { return newType_; }
      set {
        newType_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_shape_codec
        = pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> shape_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_values_codec
        = pb::FieldCodec.ForMessage(26, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> values_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    /// <summary>
    /// TODO: figure out what this should look like.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tensor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tensor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NewType, other.NewType)) return false;
      if(!shape_.Equals(other.shape_)) return false;
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (newType_ != null) hash ^= NewType.GetHashCode();
      hash ^= shape_.GetHashCode();
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (newType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NewType);
      }
      shape_.WriteTo(output, _repeated_shape_codec);
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (newType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewType);
      }
      size += shape_.CalculateSize(_repeated_shape_codec);
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tensor other) {
      if (other == null) {
        return;
      }
      if (other.newType_ != null) {
        if (newType_ == null) {
          newType_ = new global::ONNX.TypeProto.Types.Tensor();
        }
        NewType.MergeFrom(other.NewType);
      }
      shape_.Add(other.shape_);
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (newType_ == null) {
              newType_ = new global::ONNX.TypeProto.Types.Tensor();
            }
            input.ReadMessage(newType_);
            break;
          }
          case 18: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
          case 26: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElementAccess : pb::IMessage<ElementAccess> {
    private static readonly pb::MessageParser<ElementAccess> _parser = new pb::MessageParser<ElementAccess>(() => new ElementAccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAccess(ElementAccess other) : this() {
      Container = other.container_ != null ? other.Container.Clone() : null;
      Default = other.default_ != null ? other.Default.Clone() : null;
      path_ = other.path_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAccess Clone() {
      return new ElementAccess(this);
    }

    /// <summary>Field number for the "container" field.</summary>
    public const int ContainerFieldNumber = 1;
    private global::LotusvNext.Expressions.Expression container_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Container {
      get { return container_; }
      set {
        container_ = value;
      }
    }

    /// <summary>Field number for the "default" field.</summary>
    public const int DefaultFieldNumber = 2;
    private global::LotusvNext.Expressions.Expression default_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Default {
      get { return default_; }
      set {
        default_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_path_codec
        = pb::FieldCodec.ForMessage(26, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> path_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Container, other.Container)) return false;
      if (!object.Equals(Default, other.Default)) return false;
      if(!path_.Equals(other.path_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (container_ != null) hash ^= Container.GetHashCode();
      if (default_ != null) hash ^= Default.GetHashCode();
      hash ^= path_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (container_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Container);
      }
      if (default_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Default);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (container_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Container);
      }
      if (default_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Default);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementAccess other) {
      if (other == null) {
        return;
      }
      if (other.container_ != null) {
        if (container_ == null) {
          container_ = new global::LotusvNext.Expressions.Expression();
        }
        Container.MergeFrom(other.Container);
      }
      if (other.default_ != null) {
        if (default_ == null) {
          default_ = new global::LotusvNext.Expressions.Expression();
        }
        Default.MergeFrom(other.Default);
      }
      path_.Add(other.path_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (container_ == null) {
              container_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(container_);
            break;
          }
          case 18: {
            if (default_ == null) {
              default_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(default_);
            break;
          }
          case 26: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecordFieldAccess : pb::IMessage<RecordFieldAccess> {
    private static readonly pb::MessageParser<RecordFieldAccess> _parser = new pb::MessageParser<RecordFieldAccess>(() => new RecordFieldAccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecordFieldAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFieldAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFieldAccess(RecordFieldAccess other) : this() {
      Container = other.container_ != null ? other.Container.Clone() : null;
      path_ = other.path_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecordFieldAccess Clone() {
      return new RecordFieldAccess(this);
    }

    /// <summary>Field number for the "container" field.</summary>
    public const int ContainerFieldNumber = 1;
    private global::LotusvNext.Expressions.Expression container_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Container {
      get { return container_; }
      set {
        container_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_path_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> path_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecordFieldAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecordFieldAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Container, other.Container)) return false;
      if(!path_.Equals(other.path_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (container_ != null) hash ^= Container.GetHashCode();
      hash ^= path_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (container_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Container);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (container_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Container);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecordFieldAccess other) {
      if (other == null) {
        return;
      }
      if (other.container_ != null) {
        if (container_ == null) {
          container_ = new global::LotusvNext.Expressions.Expression();
        }
        Container.MergeFrom(other.Container);
      }
      path_.Add(other.path_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (container_ == null) {
              container_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(container_);
            break;
          }
          case 26: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TupleItemAccess : pb::IMessage<TupleItemAccess> {
    private static readonly pb::MessageParser<TupleItemAccess> _parser = new pb::MessageParser<TupleItemAccess>(() => new TupleItemAccess());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TupleItemAccess> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TupleItemAccess() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TupleItemAccess(TupleItemAccess other) : this() {
      Container = other.container_ != null ? other.Container.Clone() : null;
      path_ = other.path_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TupleItemAccess Clone() {
      return new TupleItemAccess(this);
    }

    /// <summary>Field number for the "container" field.</summary>
    public const int ContainerFieldNumber = 1;
    private global::LotusvNext.Expressions.Expression container_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Container {
      get { return container_; }
      set {
        container_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_path_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> path_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TupleItemAccess);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TupleItemAccess other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Container, other.Container)) return false;
      if(!path_.Equals(other.path_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (container_ != null) hash ^= Container.GetHashCode();
      hash ^= path_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (container_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Container);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (container_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Container);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TupleItemAccess other) {
      if (other == null) {
        return;
      }
      if (other.container_ != null) {
        if (container_ == null) {
          container_ = new global::LotusvNext.Expressions.Expression();
        }
        Container.MergeFrom(other.Container);
      }
      path_.Add(other.path_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (container_ == null) {
              container_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(container_);
            break;
          }
          case 26:
          case 24: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cond : pb::IMessage<Cond> {
    private static readonly pb::MessageParser<Cond> _parser = new pb::MessageParser<Cond>(() => new Cond());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cond> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cond() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cond(Cond other) : this() {
      branches_ = other.branches_.Clone();
      elseClause_ = other.elseClause_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cond Clone() {
      return new Cond(this);
    }

    /// <summary>Field number for the "branches" field.</summary>
    public const int BranchesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Cond.Types.IfThen> _repeated_branches_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.Cond.Types.IfThen.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Cond.Types.IfThen> branches_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Cond.Types.IfThen>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Cond.Types.IfThen> Branches {
      get { return branches_; }
    }

    /// <summary>Field number for the "else_clause" field.</summary>
    public const int ElseClauseFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_elseClause_codec
        = pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> elseClause_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> ElseClause {
      get { return elseClause_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cond);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cond other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!branches_.Equals(other.branches_)) return false;
      if(!elseClause_.Equals(other.elseClause_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= branches_.GetHashCode();
      hash ^= elseClause_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      branches_.WriteTo(output, _repeated_branches_codec);
      elseClause_.WriteTo(output, _repeated_elseClause_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += branches_.CalculateSize(_repeated_branches_codec);
      size += elseClause_.CalculateSize(_repeated_elseClause_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cond other) {
      if (other == null) {
        return;
      }
      branches_.Add(other.branches_);
      elseClause_.Add(other.elseClause_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            branches_.AddEntriesFrom(input, _repeated_branches_codec);
            break;
          }
          case 18: {
            elseClause_.AddEntriesFrom(input, _repeated_elseClause_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Cond message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class IfThen : pb::IMessage<IfThen> {
        private static readonly pb::MessageParser<IfThen> _parser = new pb::MessageParser<IfThen>(() => new IfThen());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IfThen> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.Cond.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IfThen() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IfThen(IfThen other) : this() {
          Condition = other.condition_ != null ? other.Condition.Clone() : null;
          thenClause_ = other.thenClause_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IfThen Clone() {
          return new IfThen(this);
        }

        /// <summary>Field number for the "condition" field.</summary>
        public const int ConditionFieldNumber = 1;
        private global::LotusvNext.Expressions.Expression condition_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Expressions.Expression Condition {
          get { return condition_; }
          set {
            condition_ = value;
          }
        }

        /// <summary>Field number for the "then_clause" field.</summary>
        public const int ThenClauseFieldNumber = 2;
        private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_thenClause_codec
            = pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> thenClause_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> ThenClause {
          get { return thenClause_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IfThen);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IfThen other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Condition, other.Condition)) return false;
          if(!thenClause_.Equals(other.thenClause_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (condition_ != null) hash ^= Condition.GetHashCode();
          hash ^= thenClause_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (condition_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Condition);
          }
          thenClause_.WriteTo(output, _repeated_thenClause_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (condition_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
          }
          size += thenClause_.CalculateSize(_repeated_thenClause_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IfThen other) {
          if (other == null) {
            return;
          }
          if (other.condition_ != null) {
            if (condition_ == null) {
              condition_ = new global::LotusvNext.Expressions.Expression();
            }
            Condition.MergeFrom(other.Condition);
          }
          thenClause_.Add(other.thenClause_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (condition_ == null) {
                  condition_ = new global::LotusvNext.Expressions.Expression();
                }
                input.ReadMessage(condition_);
                break;
              }
              case 18: {
                thenClause_.AddEntriesFrom(input, _repeated_thenClause_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class If : pb::IMessage<If> {
    private static readonly pb::MessageParser<If> _parser = new pb::MessageParser<If>(() => new If());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<If> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public If() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public If(If other) : this() {
      IfThen = other.ifThen_ != null ? other.IfThen.Clone() : null;
      elseClause_ = other.elseClause_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public If Clone() {
      return new If(this);
    }

    /// <summary>Field number for the "if_then" field.</summary>
    public const int IfThenFieldNumber = 1;
    private global::LotusvNext.Expressions.Cond.Types.IfThen ifThen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Cond.Types.IfThen IfThen {
      get { return ifThen_; }
      set {
        ifThen_ = value;
      }
    }

    /// <summary>Field number for the "else_clause" field.</summary>
    public const int ElseClauseFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_elseClause_codec
        = pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> elseClause_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> ElseClause {
      get { return elseClause_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as If);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(If other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IfThen, other.IfThen)) return false;
      if(!elseClause_.Equals(other.elseClause_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ifThen_ != null) hash ^= IfThen.GetHashCode();
      hash ^= elseClause_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ifThen_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IfThen);
      }
      elseClause_.WriteTo(output, _repeated_elseClause_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ifThen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IfThen);
      }
      size += elseClause_.CalculateSize(_repeated_elseClause_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(If other) {
      if (other == null) {
        return;
      }
      if (other.ifThen_ != null) {
        if (ifThen_ == null) {
          ifThen_ = new global::LotusvNext.Expressions.Cond.Types.IfThen();
        }
        IfThen.MergeFrom(other.IfThen);
      }
      elseClause_.Add(other.elseClause_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ifThen_ == null) {
              ifThen_ = new global::LotusvNext.Expressions.Cond.Types.IfThen();
            }
            input.ReadMessage(ifThen_);
            break;
          }
          case 18: {
            elseClause_.AddEntriesFrom(input, _repeated_elseClause_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IfNotNull : pb::IMessage<IfNotNull> {
    private static readonly pb::MessageParser<IfNotNull> _parser = new pb::MessageParser<IfNotNull>(() => new IfNotNull());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IfNotNull> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IfNotNull() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IfNotNull(IfNotNull other) : this() {
      IfThen = other.ifThen_ != null ? other.IfThen.Clone() : null;
      elseClause_ = other.elseClause_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IfNotNull Clone() {
      return new IfNotNull(this);
    }

    /// <summary>Field number for the "if_then" field.</summary>
    public const int IfThenFieldNumber = 1;
    private global::LotusvNext.Expressions.Cond.Types.IfThen ifThen_;
    /// <summary>
    /// This is similar to IF, but there is no condition. Instead, the input
    /// expression is a [null|T]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Cond.Types.IfThen IfThen {
      get { return ifThen_; }
      set {
        ifThen_ = value;
      }
    }

    /// <summary>Field number for the "else_clause" field.</summary>
    public const int ElseClauseFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_elseClause_codec
        = pb::FieldCodec.ForMessage(26, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> elseClause_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> ElseClause {
      get { return elseClause_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IfNotNull);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IfNotNull other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IfThen, other.IfThen)) return false;
      if(!elseClause_.Equals(other.elseClause_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ifThen_ != null) hash ^= IfThen.GetHashCode();
      hash ^= elseClause_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ifThen_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IfThen);
      }
      elseClause_.WriteTo(output, _repeated_elseClause_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ifThen_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IfThen);
      }
      size += elseClause_.CalculateSize(_repeated_elseClause_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IfNotNull other) {
      if (other == null) {
        return;
      }
      if (other.ifThen_ != null) {
        if (ifThen_ == null) {
          ifThen_ = new global::LotusvNext.Expressions.Cond.Types.IfThen();
        }
        IfThen.MergeFrom(other.IfThen);
      }
      elseClause_.Add(other.elseClause_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ifThen_ == null) {
              ifThen_ = new global::LotusvNext.Expressions.Cond.Types.IfThen();
            }
            input.ReadMessage(ifThen_);
            break;
          }
          case 26: {
            elseClause_.AddEntriesFrom(input, _repeated_elseClause_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Let : pb::IMessage<Let> {
    private static readonly pb::MessageParser<Let> _parser = new pb::MessageParser<Let>(() => new Let());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Let> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Let() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Let(Let other) : this() {
      variableBindings_ = other.variableBindings_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Let Clone() {
      return new Let(this);
    }

    /// <summary>Field number for the "variable_bindings" field.</summary>
    public const int VariableBindingsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Let.Types.Binding> _repeated_variableBindings_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.Let.Types.Binding.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Let.Types.Binding> variableBindings_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Let.Types.Binding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Let.Types.Binding> VariableBindings {
      get { return variableBindings_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Let);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Let other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!variableBindings_.Equals(other.variableBindings_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= variableBindings_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      variableBindings_.WriteTo(output, _repeated_variableBindings_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += variableBindings_.CalculateSize(_repeated_variableBindings_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Let other) {
      if (other == null) {
        return;
      }
      variableBindings_.Add(other.variableBindings_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            variableBindings_.AddEntriesFrom(input, _repeated_variableBindings_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Let message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Binding : pb::IMessage<Binding> {
        private static readonly pb::MessageParser<Binding> _parser = new pb::MessageParser<Binding>(() => new Binding());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Binding> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Expressions.Let.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Binding() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Binding(Binding other) : this() {
          name_ = other.name_;
          InitialValue = other.initialValue_ != null ? other.InitialValue.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Binding Clone() {
          return new Binding(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "initial_value" field.</summary>
        public const int InitialValueFieldNumber = 2;
        private global::LotusvNext.Expressions.Expression initialValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Expressions.Expression InitialValue {
          get { return initialValue_; }
          set {
            initialValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Binding);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Binding other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(InitialValue, other.InitialValue)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (initialValue_ != null) hash ^= InitialValue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (initialValue_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(InitialValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (initialValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(InitialValue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Binding other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.initialValue_ != null) {
            if (initialValue_ == null) {
              initialValue_ = new global::LotusvNext.Expressions.Expression();
            }
            InitialValue.MergeFrom(other.InitialValue);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (initialValue_ == null) {
                  initialValue_ = new global::LotusvNext.Expressions.Expression();
                }
                input.ReadMessage(initialValue_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class Set : pb::IMessage<Set> {
    private static readonly pb::MessageParser<Set> _parser = new pb::MessageParser<Set>(() => new Set());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Set> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set(Set other) : this() {
      name_ = other.name_;
      Value = other.value_ != null ? other.Value.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set Clone() {
      return new Set(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::LotusvNext.Expressions.Expression value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Set);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Set other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Set other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::LotusvNext.Expressions.Expression();
        }
        Value.MergeFrom(other.Value);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Do : pb::IMessage<Do> {
    private static readonly pb::MessageParser<Do> _parser = new pb::MessageParser<Do>(() => new Do());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Do> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Do() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Do(Do other) : this() {
      body_ = other.body_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Do Clone() {
      return new Do(this);
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_body_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> body_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Body {
      get { return body_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Do);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Do other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!body_.Equals(other.body_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= body_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      body_.WriteTo(output, _repeated_body_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += body_.CalculateSize(_repeated_body_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Do other) {
      if (other == null) {
        return;
      }
      body_.Add(other.body_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            body_.AddEntriesFrom(input, _repeated_body_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class While : pb::IMessage<While> {
    private static readonly pb::MessageParser<While> _parser = new pb::MessageParser<While>(() => new While());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<While> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public While() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public While(While other) : this() {
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
      body_ = other.body_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public While Clone() {
      return new While(this);
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 1;
    private global::LotusvNext.Expressions.Expression condition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_body_codec
        = pb::FieldCodec.ForMessage(18, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> body_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Body {
      get { return body_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as While);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(While other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Condition, other.Condition)) return false;
      if(!body_.Equals(other.body_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (condition_ != null) hash ^= Condition.GetHashCode();
      hash ^= body_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (condition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Condition);
      }
      body_.WriteTo(output, _repeated_body_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      size += body_.CalculateSize(_repeated_body_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(While other) {
      if (other == null) {
        return;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::LotusvNext.Expressions.Expression();
        }
        Condition.MergeFrom(other.Condition);
      }
      body_.Add(other.body_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (condition_ == null) {
              condition_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 18: {
            body_.AddEntriesFrom(input, _repeated_body_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class For : pb::IMessage<For> {
    private static readonly pb::MessageParser<For> _parser = new pb::MessageParser<For>(() => new For());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<For> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public For() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public For(For other) : this() {
      inductionVariables_ = other.inductionVariables_.Clone();
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
      body_ = other.body_.Clone();
      step_ = other.step_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public For Clone() {
      return new For(this);
    }

    /// <summary>Field number for the "induction_variables" field.</summary>
    public const int InductionVariablesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Let.Types.Binding> _repeated_inductionVariables_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.Let.Types.Binding.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Let.Types.Binding> inductionVariables_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Let.Types.Binding>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Let.Types.Binding> InductionVariables {
      get { return inductionVariables_; }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 2;
    private global::LotusvNext.Expressions.Expression condition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_body_codec
        = pb::FieldCodec.ForMessage(26, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> body_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Body {
      get { return body_; }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 4;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Set> _repeated_step_codec
        = pb::FieldCodec.ForMessage(34, global::LotusvNext.Expressions.Set.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Set> step_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Set>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Set> Step {
      get { return step_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as For);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(For other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!inductionVariables_.Equals(other.inductionVariables_)) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      if(!body_.Equals(other.body_)) return false;
      if(!step_.Equals(other.step_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= inductionVariables_.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      hash ^= body_.GetHashCode();
      hash ^= step_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inductionVariables_.WriteTo(output, _repeated_inductionVariables_codec);
      if (condition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Condition);
      }
      body_.WriteTo(output, _repeated_body_codec);
      step_.WriteTo(output, _repeated_step_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += inductionVariables_.CalculateSize(_repeated_inductionVariables_codec);
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      size += body_.CalculateSize(_repeated_body_codec);
      size += step_.CalculateSize(_repeated_step_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(For other) {
      if (other == null) {
        return;
      }
      inductionVariables_.Add(other.inductionVariables_);
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::LotusvNext.Expressions.Expression();
        }
        Condition.MergeFrom(other.Condition);
      }
      body_.Add(other.body_);
      step_.Add(other.step_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inductionVariables_.AddEntriesFrom(input, _repeated_inductionVariables_codec);
            break;
          }
          case 18: {
            if (condition_ == null) {
              condition_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 26: {
            body_.AddEntriesFrom(input, _repeated_body_codec);
            break;
          }
          case 34: {
            step_.AddEntriesFrom(input, _repeated_step_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForEach : pb::IMessage<ForEach> {
    private static readonly pb::MessageParser<ForEach> _parser = new pb::MessageParser<ForEach>(() => new ForEach());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForEach> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForEach() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForEach(ForEach other) : this() {
      variable_ = other.variable_;
      Sequence = other.sequence_ != null ? other.Sequence.Clone() : null;
      body_ = other.body_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForEach Clone() {
      return new ForEach(this);
    }

    /// <summary>Field number for the "variable" field.</summary>
    public const int VariableFieldNumber = 1;
    private string variable_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Variable {
      get { return variable_; }
      set {
        variable_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 2;
    private global::LotusvNext.Expressions.Expression sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Expression Sequence {
      get { return sequence_; }
      set {
        sequence_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_body_codec
        = pb::FieldCodec.ForMessage(26, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> body_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Body {
      get { return body_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForEach);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForEach other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Variable != other.Variable) return false;
      if (!object.Equals(Sequence, other.Sequence)) return false;
      if(!body_.Equals(other.body_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Variable.Length != 0) hash ^= Variable.GetHashCode();
      if (sequence_ != null) hash ^= Sequence.GetHashCode();
      hash ^= body_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Variable.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Variable);
      }
      if (sequence_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Sequence);
      }
      body_.WriteTo(output, _repeated_body_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Variable.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Variable);
      }
      if (sequence_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sequence);
      }
      size += body_.CalculateSize(_repeated_body_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForEach other) {
      if (other == null) {
        return;
      }
      if (other.Variable.Length != 0) {
        Variable = other.Variable;
      }
      if (other.sequence_ != null) {
        if (sequence_ == null) {
          sequence_ = new global::LotusvNext.Expressions.Expression();
        }
        Sequence.MergeFrom(other.Sequence);
      }
      body_.Add(other.body_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Variable = input.ReadString();
            break;
          }
          case 18: {
            if (sequence_ == null) {
              sequence_ = new global::LotusvNext.Expressions.Expression();
            }
            input.ReadMessage(sequence_);
            break;
          }
          case 26: {
            body_.AddEntriesFrom(input, _repeated_body_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Comment : pb::IMessage<Comment> {
    private static readonly pb::MessageParser<Comment> _parser = new pb::MessageParser<Comment>(() => new Comment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Comment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Comment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Comment(Comment other) : this() {
      comment_ = other.comment_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Comment Clone() {
      return new Comment(this);
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int Comment_FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_comment_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> comment_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Comment_ {
      get { return comment_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Comment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Comment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!comment_.Equals(other.comment_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= comment_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      comment_.WriteTo(output, _repeated_comment_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += comment_.CalculateSize(_repeated_comment_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Comment other) {
      if (other == null) {
        return;
      }
      comment_.Add(other.comment_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            comment_.AddEntriesFrom(input, _repeated_comment_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Log : pb::IMessage<Log> {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      expr_ = other.expr_.Clone();
      namespace_ = other.namespace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "expr" field.</summary>
    public const int ExprFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LotusvNext.Expressions.Expression> _repeated_expr_codec
        = pb::FieldCodec.ForMessage(10, global::LotusvNext.Expressions.Expression.Parser);
    private readonly pbc::RepeatedField<global::LotusvNext.Expressions.Expression> expr_ = new pbc::RepeatedField<global::LotusvNext.Expressions.Expression>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LotusvNext.Expressions.Expression> Expr {
      get { return expr_; }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 2;
    private string namespace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!expr_.Equals(other.expr_)) return false;
      if (Namespace != other.Namespace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= expr_.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      expr_.WriteTo(output, _repeated_expr_codec);
      if (Namespace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Namespace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += expr_.CalculateSize(_repeated_expr_codec);
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      expr_.Add(other.expr_);
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            expr_.AddEntriesFrom(input, _repeated_expr_codec);
            break;
          }
          case 18: {
            Namespace = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Expression : pb::IMessage<Expression> {
    private static readonly pb::MessageParser<Expression> _parser = new pb::MessageParser<Expression>(() => new Expression());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Expression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Expressions.ExpressionsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expression(Expression other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.Literal:
          Literal = other.Literal.Clone();
          break;
        case ValueOneofCase.Variable:
          Variable = other.Variable.Clone();
          break;
        case ValueOneofCase.Funcref:
          Funcref = other.Funcref.Clone();
          break;
        case ValueOneofCase.Lambda:
          Lambda = other.Lambda.Clone();
          break;
        case ValueOneofCase.Call:
          Call = other.Call.Clone();
          break;
        case ValueOneofCase.Array:
          Array = other.Array.Clone();
          break;
        case ValueOneofCase.Map:
          Map = other.Map.Clone();
          break;
        case ValueOneofCase.Record:
          Record = other.Record.Clone();
          break;
        case ValueOneofCase.Tensor:
          Tensor = other.Tensor.Clone();
          break;
        case ValueOneofCase.Tuple:
          Tuple = other.Tuple.Clone();
          break;
        case ValueOneofCase.Index:
          Index = other.Index.Clone();
          break;
        case ValueOneofCase.Field:
          Field = other.Field.Clone();
          break;
        case ValueOneofCase.Item:
          Item = other.Item.Clone();
          break;
        case ValueOneofCase.Cond:
          Cond = other.Cond.Clone();
          break;
        case ValueOneofCase.IfThen:
          IfThen = other.IfThen.Clone();
          break;
        case ValueOneofCase.IfNotNull:
          IfNotNull = other.IfNotNull.Clone();
          break;
        case ValueOneofCase.Modelref:
          Modelref = other.Modelref.Clone();
          break;
        case ValueOneofCase.Let:
          Let = other.Let.Clone();
          break;
        case ValueOneofCase.Set:
          Set = other.Set.Clone();
          break;
        case ValueOneofCase.Do:
          Do = other.Do.Clone();
          break;
        case ValueOneofCase.While:
          While = other.While.Clone();
          break;
        case ValueOneofCase.For:
          For = other.For.Clone();
          break;
        case ValueOneofCase.ForEach:
          ForEach = other.ForEach.Clone();
          break;
        case ValueOneofCase.Comment:
          Comment = other.Comment.Clone();
          break;
        case ValueOneofCase.Log:
          Log = other.Log.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Expression Clone() {
      return new Expression(this);
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ValueProto Literal {
      get { return valueCase_ == ValueOneofCase.Literal ? (global::LotusvNext.Expressions.ValueProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Literal;
      }
    }

    /// <summary>Field number for the "variable" field.</summary>
    public const int VariableFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.VariableReference Variable {
      get { return valueCase_ == ValueOneofCase.Variable ? (global::LotusvNext.Expressions.VariableReference) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Variable;
      }
    }

    /// <summary>Field number for the "funcref" field.</summary>
    public const int FuncrefFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.FunctionReference Funcref {
      get { return valueCase_ == ValueOneofCase.Funcref ? (global::LotusvNext.Expressions.FunctionReference) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Funcref;
      }
    }

    /// <summary>Field number for the "lambda" field.</summary>
    public const int LambdaFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Lambda Lambda {
      get { return valueCase_ == ValueOneofCase.Lambda ? (global::LotusvNext.Expressions.Lambda) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Lambda;
      }
    }

    /// <summary>Field number for the "call" field.</summary>
    public const int CallFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Call Call {
      get { return valueCase_ == ValueOneofCase.Call ? (global::LotusvNext.Expressions.Call) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Call;
      }
    }

    /// <summary>Field number for the "array" field.</summary>
    public const int ArrayFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Array Array {
      get { return valueCase_ == ValueOneofCase.Array ? (global::LotusvNext.Expressions.Array) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Array;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Map Map {
      get { return valueCase_ == ValueOneofCase.Map ? (global::LotusvNext.Expressions.Map) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Map;
      }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Record Record {
      get { return valueCase_ == ValueOneofCase.Record ? (global::LotusvNext.Expressions.Record) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Record;
      }
    }

    /// <summary>Field number for the "tensor" field.</summary>
    public const int TensorFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Tensor Tensor {
      get { return valueCase_ == ValueOneofCase.Tensor ? (global::LotusvNext.Expressions.Tensor) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Tensor;
      }
    }

    /// <summary>Field number for the "tuple" field.</summary>
    public const int TupleFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Tuple Tuple {
      get { return valueCase_ == ValueOneofCase.Tuple ? (global::LotusvNext.Expressions.Tuple) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Tuple;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ElementAccess Index {
      get { return valueCase_ == ValueOneofCase.Index ? (global::LotusvNext.Expressions.ElementAccess) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Index;
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.RecordFieldAccess Field {
      get { return valueCase_ == ValueOneofCase.Field ? (global::LotusvNext.Expressions.RecordFieldAccess) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Field;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.TupleItemAccess Item {
      get { return valueCase_ == ValueOneofCase.Item ? (global::LotusvNext.Expressions.TupleItemAccess) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Item;
      }
    }

    /// <summary>Field number for the "cond" field.</summary>
    public const int CondFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Cond Cond {
      get { return valueCase_ == ValueOneofCase.Cond ? (global::LotusvNext.Expressions.Cond) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Cond;
      }
    }

    /// <summary>Field number for the "if_then" field.</summary>
    public const int IfThenFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.If IfThen {
      get { return valueCase_ == ValueOneofCase.IfThen ? (global::LotusvNext.Expressions.If) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.IfThen;
      }
    }

    /// <summary>Field number for the "if_not_null" field.</summary>
    public const int IfNotNullFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.IfNotNull IfNotNull {
      get { return valueCase_ == ValueOneofCase.IfNotNull ? (global::LotusvNext.Expressions.IfNotNull) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.IfNotNull;
      }
    }

    /// <summary>Field number for the "modelref" field.</summary>
    public const int ModelrefFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ModelReference Modelref {
      get { return valueCase_ == ValueOneofCase.Modelref ? (global::LotusvNext.Expressions.ModelReference) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Modelref;
      }
    }

    /// <summary>Field number for the "let" field.</summary>
    public const int LetFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Let Let {
      get { return valueCase_ == ValueOneofCase.Let ? (global::LotusvNext.Expressions.Let) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Let;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Set Set {
      get { return valueCase_ == ValueOneofCase.Set ? (global::LotusvNext.Expressions.Set) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Set;
      }
    }

    /// <summary>Field number for the "do" field.</summary>
    public const int DoFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Do Do {
      get { return valueCase_ == ValueOneofCase.Do ? (global::LotusvNext.Expressions.Do) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Do;
      }
    }

    /// <summary>Field number for the "while" field.</summary>
    public const int WhileFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.While While {
      get { return valueCase_ == ValueOneofCase.While ? (global::LotusvNext.Expressions.While) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.While;
      }
    }

    /// <summary>Field number for the "for" field.</summary>
    public const int ForFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.For For {
      get { return valueCase_ == ValueOneofCase.For ? (global::LotusvNext.Expressions.For) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.For;
      }
    }

    /// <summary>Field number for the "for_each" field.</summary>
    public const int ForEachFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.ForEach ForEach {
      get { return valueCase_ == ValueOneofCase.ForEach ? (global::LotusvNext.Expressions.ForEach) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.ForEach;
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Comment Comment {
      get { return valueCase_ == ValueOneofCase.Comment ? (global::LotusvNext.Expressions.Comment) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Comment;
      }
    }

    /// <summary>Field number for the "log" field.</summary>
    public const int LogFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Expressions.Log Log {
      get { return valueCase_ == ValueOneofCase.Log ? (global::LotusvNext.Expressions.Log) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Log;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      Literal = 1,
      Variable = 3,
      Funcref = 4,
      Lambda = 5,
      Call = 6,
      Array = 7,
      Map = 8,
      Record = 9,
      Tensor = 10,
      Tuple = 11,
      Index = 12,
      Field = 13,
      Item = 14,
      Cond = 15,
      IfThen = 16,
      IfNotNull = 17,
      Modelref = 18,
      Let = 19,
      Set = 20,
      Do = 21,
      While = 22,
      For = 23,
      ForEach = 24,
      Comment = 25,
      Log = 26,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Expression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Expression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Literal, other.Literal)) return false;
      if (!object.Equals(Variable, other.Variable)) return false;
      if (!object.Equals(Funcref, other.Funcref)) return false;
      if (!object.Equals(Lambda, other.Lambda)) return false;
      if (!object.Equals(Call, other.Call)) return false;
      if (!object.Equals(Array, other.Array)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Record, other.Record)) return false;
      if (!object.Equals(Tensor, other.Tensor)) return false;
      if (!object.Equals(Tuple, other.Tuple)) return false;
      if (!object.Equals(Index, other.Index)) return false;
      if (!object.Equals(Field, other.Field)) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(Cond, other.Cond)) return false;
      if (!object.Equals(IfThen, other.IfThen)) return false;
      if (!object.Equals(IfNotNull, other.IfNotNull)) return false;
      if (!object.Equals(Modelref, other.Modelref)) return false;
      if (!object.Equals(Let, other.Let)) return false;
      if (!object.Equals(Set, other.Set)) return false;
      if (!object.Equals(Do, other.Do)) return false;
      if (!object.Equals(While, other.While)) return false;
      if (!object.Equals(For, other.For)) return false;
      if (!object.Equals(ForEach, other.ForEach)) return false;
      if (!object.Equals(Comment, other.Comment)) return false;
      if (!object.Equals(Log, other.Log)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.Literal) hash ^= Literal.GetHashCode();
      if (valueCase_ == ValueOneofCase.Variable) hash ^= Variable.GetHashCode();
      if (valueCase_ == ValueOneofCase.Funcref) hash ^= Funcref.GetHashCode();
      if (valueCase_ == ValueOneofCase.Lambda) hash ^= Lambda.GetHashCode();
      if (valueCase_ == ValueOneofCase.Call) hash ^= Call.GetHashCode();
      if (valueCase_ == ValueOneofCase.Array) hash ^= Array.GetHashCode();
      if (valueCase_ == ValueOneofCase.Map) hash ^= Map.GetHashCode();
      if (valueCase_ == ValueOneofCase.Record) hash ^= Record.GetHashCode();
      if (valueCase_ == ValueOneofCase.Tensor) hash ^= Tensor.GetHashCode();
      if (valueCase_ == ValueOneofCase.Tuple) hash ^= Tuple.GetHashCode();
      if (valueCase_ == ValueOneofCase.Index) hash ^= Index.GetHashCode();
      if (valueCase_ == ValueOneofCase.Field) hash ^= Field.GetHashCode();
      if (valueCase_ == ValueOneofCase.Item) hash ^= Item.GetHashCode();
      if (valueCase_ == ValueOneofCase.Cond) hash ^= Cond.GetHashCode();
      if (valueCase_ == ValueOneofCase.IfThen) hash ^= IfThen.GetHashCode();
      if (valueCase_ == ValueOneofCase.IfNotNull) hash ^= IfNotNull.GetHashCode();
      if (valueCase_ == ValueOneofCase.Modelref) hash ^= Modelref.GetHashCode();
      if (valueCase_ == ValueOneofCase.Let) hash ^= Let.GetHashCode();
      if (valueCase_ == ValueOneofCase.Set) hash ^= Set.GetHashCode();
      if (valueCase_ == ValueOneofCase.Do) hash ^= Do.GetHashCode();
      if (valueCase_ == ValueOneofCase.While) hash ^= While.GetHashCode();
      if (valueCase_ == ValueOneofCase.For) hash ^= For.GetHashCode();
      if (valueCase_ == ValueOneofCase.ForEach) hash ^= ForEach.GetHashCode();
      if (valueCase_ == ValueOneofCase.Comment) hash ^= Comment.GetHashCode();
      if (valueCase_ == ValueOneofCase.Log) hash ^= Log.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.Literal) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (valueCase_ == ValueOneofCase.Variable) {
        output.WriteRawTag(26);
        output.WriteMessage(Variable);
      }
      if (valueCase_ == ValueOneofCase.Funcref) {
        output.WriteRawTag(34);
        output.WriteMessage(Funcref);
      }
      if (valueCase_ == ValueOneofCase.Lambda) {
        output.WriteRawTag(42);
        output.WriteMessage(Lambda);
      }
      if (valueCase_ == ValueOneofCase.Call) {
        output.WriteRawTag(50);
        output.WriteMessage(Call);
      }
      if (valueCase_ == ValueOneofCase.Array) {
        output.WriteRawTag(58);
        output.WriteMessage(Array);
      }
      if (valueCase_ == ValueOneofCase.Map) {
        output.WriteRawTag(66);
        output.WriteMessage(Map);
      }
      if (valueCase_ == ValueOneofCase.Record) {
        output.WriteRawTag(74);
        output.WriteMessage(Record);
      }
      if (valueCase_ == ValueOneofCase.Tensor) {
        output.WriteRawTag(82);
        output.WriteMessage(Tensor);
      }
      if (valueCase_ == ValueOneofCase.Tuple) {
        output.WriteRawTag(90);
        output.WriteMessage(Tuple);
      }
      if (valueCase_ == ValueOneofCase.Index) {
        output.WriteRawTag(98);
        output.WriteMessage(Index);
      }
      if (valueCase_ == ValueOneofCase.Field) {
        output.WriteRawTag(106);
        output.WriteMessage(Field);
      }
      if (valueCase_ == ValueOneofCase.Item) {
        output.WriteRawTag(114);
        output.WriteMessage(Item);
      }
      if (valueCase_ == ValueOneofCase.Cond) {
        output.WriteRawTag(122);
        output.WriteMessage(Cond);
      }
      if (valueCase_ == ValueOneofCase.IfThen) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(IfThen);
      }
      if (valueCase_ == ValueOneofCase.IfNotNull) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(IfNotNull);
      }
      if (valueCase_ == ValueOneofCase.Modelref) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Modelref);
      }
      if (valueCase_ == ValueOneofCase.Let) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Let);
      }
      if (valueCase_ == ValueOneofCase.Set) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Set);
      }
      if (valueCase_ == ValueOneofCase.Do) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Do);
      }
      if (valueCase_ == ValueOneofCase.While) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(While);
      }
      if (valueCase_ == ValueOneofCase.For) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(For);
      }
      if (valueCase_ == ValueOneofCase.ForEach) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(ForEach);
      }
      if (valueCase_ == ValueOneofCase.Comment) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Comment);
      }
      if (valueCase_ == ValueOneofCase.Log) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(Log);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.Literal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Literal);
      }
      if (valueCase_ == ValueOneofCase.Variable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Variable);
      }
      if (valueCase_ == ValueOneofCase.Funcref) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Funcref);
      }
      if (valueCase_ == ValueOneofCase.Lambda) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lambda);
      }
      if (valueCase_ == ValueOneofCase.Call) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Call);
      }
      if (valueCase_ == ValueOneofCase.Array) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Array);
      }
      if (valueCase_ == ValueOneofCase.Map) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (valueCase_ == ValueOneofCase.Record) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (valueCase_ == ValueOneofCase.Tensor) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tensor);
      }
      if (valueCase_ == ValueOneofCase.Tuple) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
      }
      if (valueCase_ == ValueOneofCase.Index) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Index);
      }
      if (valueCase_ == ValueOneofCase.Field) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      if (valueCase_ == ValueOneofCase.Item) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (valueCase_ == ValueOneofCase.Cond) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cond);
      }
      if (valueCase_ == ValueOneofCase.IfThen) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IfThen);
      }
      if (valueCase_ == ValueOneofCase.IfNotNull) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IfNotNull);
      }
      if (valueCase_ == ValueOneofCase.Modelref) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Modelref);
      }
      if (valueCase_ == ValueOneofCase.Let) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Let);
      }
      if (valueCase_ == ValueOneofCase.Set) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Set);
      }
      if (valueCase_ == ValueOneofCase.Do) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Do);
      }
      if (valueCase_ == ValueOneofCase.While) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(While);
      }
      if (valueCase_ == ValueOneofCase.For) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(For);
      }
      if (valueCase_ == ValueOneofCase.ForEach) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ForEach);
      }
      if (valueCase_ == ValueOneofCase.Comment) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Comment);
      }
      if (valueCase_ == ValueOneofCase.Log) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Log);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Expression other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.Literal:
          if (Literal == null) {
            Literal = new global::LotusvNext.Expressions.ValueProto();
          }
          Literal.MergeFrom(other.Literal);
          break;
        case ValueOneofCase.Variable:
          if (Variable == null) {
            Variable = new global::LotusvNext.Expressions.VariableReference();
          }
          Variable.MergeFrom(other.Variable);
          break;
        case ValueOneofCase.Funcref:
          if (Funcref == null) {
            Funcref = new global::LotusvNext.Expressions.FunctionReference();
          }
          Funcref.MergeFrom(other.Funcref);
          break;
        case ValueOneofCase.Lambda:
          if (Lambda == null) {
            Lambda = new global::LotusvNext.Expressions.Lambda();
          }
          Lambda.MergeFrom(other.Lambda);
          break;
        case ValueOneofCase.Call:
          if (Call == null) {
            Call = new global::LotusvNext.Expressions.Call();
          }
          Call.MergeFrom(other.Call);
          break;
        case ValueOneofCase.Array:
          if (Array == null) {
            Array = new global::LotusvNext.Expressions.Array();
          }
          Array.MergeFrom(other.Array);
          break;
        case ValueOneofCase.Map:
          if (Map == null) {
            Map = new global::LotusvNext.Expressions.Map();
          }
          Map.MergeFrom(other.Map);
          break;
        case ValueOneofCase.Record:
          if (Record == null) {
            Record = new global::LotusvNext.Expressions.Record();
          }
          Record.MergeFrom(other.Record);
          break;
        case ValueOneofCase.Tensor:
          if (Tensor == null) {
            Tensor = new global::LotusvNext.Expressions.Tensor();
          }
          Tensor.MergeFrom(other.Tensor);
          break;
        case ValueOneofCase.Tuple:
          if (Tuple == null) {
            Tuple = new global::LotusvNext.Expressions.Tuple();
          }
          Tuple.MergeFrom(other.Tuple);
          break;
        case ValueOneofCase.Index:
          if (Index == null) {
            Index = new global::LotusvNext.Expressions.ElementAccess();
          }
          Index.MergeFrom(other.Index);
          break;
        case ValueOneofCase.Field:
          if (Field == null) {
            Field = new global::LotusvNext.Expressions.RecordFieldAccess();
          }
          Field.MergeFrom(other.Field);
          break;
        case ValueOneofCase.Item:
          if (Item == null) {
            Item = new global::LotusvNext.Expressions.TupleItemAccess();
          }
          Item.MergeFrom(other.Item);
          break;
        case ValueOneofCase.Cond:
          if (Cond == null) {
            Cond = new global::LotusvNext.Expressions.Cond();
          }
          Cond.MergeFrom(other.Cond);
          break;
        case ValueOneofCase.IfThen:
          if (IfThen == null) {
            IfThen = new global::LotusvNext.Expressions.If();
          }
          IfThen.MergeFrom(other.IfThen);
          break;
        case ValueOneofCase.IfNotNull:
          if (IfNotNull == null) {
            IfNotNull = new global::LotusvNext.Expressions.IfNotNull();
          }
          IfNotNull.MergeFrom(other.IfNotNull);
          break;
        case ValueOneofCase.Modelref:
          if (Modelref == null) {
            Modelref = new global::LotusvNext.Expressions.ModelReference();
          }
          Modelref.MergeFrom(other.Modelref);
          break;
        case ValueOneofCase.Let:
          if (Let == null) {
            Let = new global::LotusvNext.Expressions.Let();
          }
          Let.MergeFrom(other.Let);
          break;
        case ValueOneofCase.Set:
          if (Set == null) {
            Set = new global::LotusvNext.Expressions.Set();
          }
          Set.MergeFrom(other.Set);
          break;
        case ValueOneofCase.Do:
          if (Do == null) {
            Do = new global::LotusvNext.Expressions.Do();
          }
          Do.MergeFrom(other.Do);
          break;
        case ValueOneofCase.While:
          if (While == null) {
            While = new global::LotusvNext.Expressions.While();
          }
          While.MergeFrom(other.While);
          break;
        case ValueOneofCase.For:
          if (For == null) {
            For = new global::LotusvNext.Expressions.For();
          }
          For.MergeFrom(other.For);
          break;
        case ValueOneofCase.ForEach:
          if (ForEach == null) {
            ForEach = new global::LotusvNext.Expressions.ForEach();
          }
          ForEach.MergeFrom(other.ForEach);
          break;
        case ValueOneofCase.Comment:
          if (Comment == null) {
            Comment = new global::LotusvNext.Expressions.Comment();
          }
          Comment.MergeFrom(other.Comment);
          break;
        case ValueOneofCase.Log:
          if (Log == null) {
            Log = new global::LotusvNext.Expressions.Log();
          }
          Log.MergeFrom(other.Log);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LotusvNext.Expressions.ValueProto subBuilder = new global::LotusvNext.Expressions.ValueProto();
            if (valueCase_ == ValueOneofCase.Literal) {
              subBuilder.MergeFrom(Literal);
            }
            input.ReadMessage(subBuilder);
            Literal = subBuilder;
            break;
          }
          case 26: {
            global::LotusvNext.Expressions.VariableReference subBuilder = new global::LotusvNext.Expressions.VariableReference();
            if (valueCase_ == ValueOneofCase.Variable) {
              subBuilder.MergeFrom(Variable);
            }
            input.ReadMessage(subBuilder);
            Variable = subBuilder;
            break;
          }
          case 34: {
            global::LotusvNext.Expressions.FunctionReference subBuilder = new global::LotusvNext.Expressions.FunctionReference();
            if (valueCase_ == ValueOneofCase.Funcref) {
              subBuilder.MergeFrom(Funcref);
            }
            input.ReadMessage(subBuilder);
            Funcref = subBuilder;
            break;
          }
          case 42: {
            global::LotusvNext.Expressions.Lambda subBuilder = new global::LotusvNext.Expressions.Lambda();
            if (valueCase_ == ValueOneofCase.Lambda) {
              subBuilder.MergeFrom(Lambda);
            }
            input.ReadMessage(subBuilder);
            Lambda = subBuilder;
            break;
          }
          case 50: {
            global::LotusvNext.Expressions.Call subBuilder = new global::LotusvNext.Expressions.Call();
            if (valueCase_ == ValueOneofCase.Call) {
              subBuilder.MergeFrom(Call);
            }
            input.ReadMessage(subBuilder);
            Call = subBuilder;
            break;
          }
          case 58: {
            global::LotusvNext.Expressions.Array subBuilder = new global::LotusvNext.Expressions.Array();
            if (valueCase_ == ValueOneofCase.Array) {
              subBuilder.MergeFrom(Array);
            }
            input.ReadMessage(subBuilder);
            Array = subBuilder;
            break;
          }
          case 66: {
            global::LotusvNext.Expressions.Map subBuilder = new global::LotusvNext.Expressions.Map();
            if (valueCase_ == ValueOneofCase.Map) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder);
            Map = subBuilder;
            break;
          }
          case 74: {
            global::LotusvNext.Expressions.Record subBuilder = new global::LotusvNext.Expressions.Record();
            if (valueCase_ == ValueOneofCase.Record) {
              subBuilder.MergeFrom(Record);
            }
            input.ReadMessage(subBuilder);
            Record = subBuilder;
            break;
          }
          case 82: {
            global::LotusvNext.Expressions.Tensor subBuilder = new global::LotusvNext.Expressions.Tensor();
            if (valueCase_ == ValueOneofCase.Tensor) {
              subBuilder.MergeFrom(Tensor);
            }
            input.ReadMessage(subBuilder);
            Tensor = subBuilder;
            break;
          }
          case 90: {
            global::LotusvNext.Expressions.Tuple subBuilder = new global::LotusvNext.Expressions.Tuple();
            if (valueCase_ == ValueOneofCase.Tuple) {
              subBuilder.MergeFrom(Tuple);
            }
            input.ReadMessage(subBuilder);
            Tuple = subBuilder;
            break;
          }
          case 98: {
            global::LotusvNext.Expressions.ElementAccess subBuilder = new global::LotusvNext.Expressions.ElementAccess();
            if (valueCase_ == ValueOneofCase.Index) {
              subBuilder.MergeFrom(Index);
            }
            input.ReadMessage(subBuilder);
            Index = subBuilder;
            break;
          }
          case 106: {
            global::LotusvNext.Expressions.RecordFieldAccess subBuilder = new global::LotusvNext.Expressions.RecordFieldAccess();
            if (valueCase_ == ValueOneofCase.Field) {
              subBuilder.MergeFrom(Field);
            }
            input.ReadMessage(subBuilder);
            Field = subBuilder;
            break;
          }
          case 114: {
            global::LotusvNext.Expressions.TupleItemAccess subBuilder = new global::LotusvNext.Expressions.TupleItemAccess();
            if (valueCase_ == ValueOneofCase.Item) {
              subBuilder.MergeFrom(Item);
            }
            input.ReadMessage(subBuilder);
            Item = subBuilder;
            break;
          }
          case 122: {
            global::LotusvNext.Expressions.Cond subBuilder = new global::LotusvNext.Expressions.Cond();
            if (valueCase_ == ValueOneofCase.Cond) {
              subBuilder.MergeFrom(Cond);
            }
            input.ReadMessage(subBuilder);
            Cond = subBuilder;
            break;
          }
          case 130: {
            global::LotusvNext.Expressions.If subBuilder = new global::LotusvNext.Expressions.If();
            if (valueCase_ == ValueOneofCase.IfThen) {
              subBuilder.MergeFrom(IfThen);
            }
            input.ReadMessage(subBuilder);
            IfThen = subBuilder;
            break;
          }
          case 138: {
            global::LotusvNext.Expressions.IfNotNull subBuilder = new global::LotusvNext.Expressions.IfNotNull();
            if (valueCase_ == ValueOneofCase.IfNotNull) {
              subBuilder.MergeFrom(IfNotNull);
            }
            input.ReadMessage(subBuilder);
            IfNotNull = subBuilder;
            break;
          }
          case 146: {
            global::LotusvNext.Expressions.ModelReference subBuilder = new global::LotusvNext.Expressions.ModelReference();
            if (valueCase_ == ValueOneofCase.Modelref) {
              subBuilder.MergeFrom(Modelref);
            }
            input.ReadMessage(subBuilder);
            Modelref = subBuilder;
            break;
          }
          case 154: {
            global::LotusvNext.Expressions.Let subBuilder = new global::LotusvNext.Expressions.Let();
            if (valueCase_ == ValueOneofCase.Let) {
              subBuilder.MergeFrom(Let);
            }
            input.ReadMessage(subBuilder);
            Let = subBuilder;
            break;
          }
          case 162: {
            global::LotusvNext.Expressions.Set subBuilder = new global::LotusvNext.Expressions.Set();
            if (valueCase_ == ValueOneofCase.Set) {
              subBuilder.MergeFrom(Set);
            }
            input.ReadMessage(subBuilder);
            Set = subBuilder;
            break;
          }
          case 170: {
            global::LotusvNext.Expressions.Do subBuilder = new global::LotusvNext.Expressions.Do();
            if (valueCase_ == ValueOneofCase.Do) {
              subBuilder.MergeFrom(Do);
            }
            input.ReadMessage(subBuilder);
            Do = subBuilder;
            break;
          }
          case 178: {
            global::LotusvNext.Expressions.While subBuilder = new global::LotusvNext.Expressions.While();
            if (valueCase_ == ValueOneofCase.While) {
              subBuilder.MergeFrom(While);
            }
            input.ReadMessage(subBuilder);
            While = subBuilder;
            break;
          }
          case 186: {
            global::LotusvNext.Expressions.For subBuilder = new global::LotusvNext.Expressions.For();
            if (valueCase_ == ValueOneofCase.For) {
              subBuilder.MergeFrom(For);
            }
            input.ReadMessage(subBuilder);
            For = subBuilder;
            break;
          }
          case 194: {
            global::LotusvNext.Expressions.ForEach subBuilder = new global::LotusvNext.Expressions.ForEach();
            if (valueCase_ == ValueOneofCase.ForEach) {
              subBuilder.MergeFrom(ForEach);
            }
            input.ReadMessage(subBuilder);
            ForEach = subBuilder;
            break;
          }
          case 202: {
            global::LotusvNext.Expressions.Comment subBuilder = new global::LotusvNext.Expressions.Comment();
            if (valueCase_ == ValueOneofCase.Comment) {
              subBuilder.MergeFrom(Comment);
            }
            input.ReadMessage(subBuilder);
            Comment = subBuilder;
            break;
          }
          case 210: {
            global::LotusvNext.Expressions.Log subBuilder = new global::LotusvNext.Expressions.Log();
            if (valueCase_ == ValueOneofCase.Log) {
              subBuilder.MergeFrom(Log);
            }
            input.ReadMessage(subBuilder);
            Log = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
