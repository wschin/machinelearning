// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LotusvNext.Types {

  /// <summary>Holder for reflection information generated from types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0eXBlcy5wcm90bxIKTG90dXN2TmV4dBoOb25ueC1tbC5wcm90bzMiVwoO",
            "VmFsdWVJbmZvUHJvdG8SDAoEbmFtZRgBIAEoCRIjCgR0eXBlGAIgASgLMhUu",
            "TG90dXN2TmV4dC5UeXBlUHJvdG8SEgoKZG9jX3N0cmluZxgDIAEoCSKkEQoJ",
            "VHlwZVByb3RvEjMKC3RlbnNvcl90eXBlGAEgASgLMhwuTG90dXN2TmV4dC5U",
            "eXBlUHJvdG8uVGVuc29ySAASNwoNc2VxdWVuY2VfdHlwZRgEIAEoCzIeLkxv",
            "dHVzdk5leHQuVHlwZVByb3RvLlNlcXVlbmNlSAASLQoIbWFwX3R5cGUYBSAB",
            "KAsyGS5Mb3R1c3ZOZXh0LlR5cGVQcm90by5NYXBIABIxCgp0dXBsZV90eXBl",
            "GAcgASgLMhsuTG90dXN2TmV4dC5UeXBlUHJvdG8uVHVwbGVIABIzCgtvcGFx",
            "dWVfdHlwZRgIIAEoCzIcLkxvdHVzdk5leHQuVHlwZVByb3RvLk9wYXF1ZUgA",
            "EjkKC3NwYXJzZV90eXBlGAkgASgLMiIuTG90dXN2TmV4dC5UeXBlUHJvdG8u",
            "U3BhcnNlVGVuc29ySAASMwoLcmVjb3JkX3R5cGUYCiABKAsyHC5Mb3R1c3ZO",
            "ZXh0LlR5cGVQcm90by5SZWNvcmRIABI3Cg1udWxsYWJsZV90eXBlGAsgASgL",
            "Mh4uTG90dXN2TmV4dC5UeXBlUHJvdG8uTnVsbGFibGVIABIzCgtzY2FsYXJf",
            "dHlwZRgMIAEoCzIcLkxvdHVzdk5leHQuVHlwZVByb3RvLlNjYWxhckgAEkIK",
            "DnR5cGVfcmVmZXJlbmNlGGQgASgLMiguTG90dXN2TmV4dC5UeXBlUHJvdG8u",
            "VHlwZVJlZmVyZW5jZVByb3RvSAASPQoOdHlwZV9wYXJhbWV0ZXIYZSABKAsy",
            "Iy5Mb3R1c3ZOZXh0LlR5cGVQcm90by5UeXBlUGFyYW1ldGVySAASQQoNZnVu",
            "Y3Rpb25fdHlwZRhmIAEoCzIoLkxvdHVzdk5leHQuVHlwZVByb3RvLlNpZ25h",
            "dHVyZURlY2xQcm90b0gAEiwKBnNjYWxhchhnIAEoDjIaLm9ubnguVGVuc29y",
            "UHJvdG8uRGF0YVR5cGVIABqSAQoGVGVuc29yEi0KCWVsZW1fdHlwZRgBIAEo",
            "DjIaLm9ubnguVGVuc29yUHJvdG8uRGF0YVR5cGUSJQoFc2hhcGUYAiABKAsy",
            "Fi5vbm54LlRlbnNvclNoYXBlUHJvdG8SMgoFcGFyYW0YZCABKAsyIy5Mb3R1",
            "c3ZOZXh0LlR5cGVQcm90by5UeXBlUGFyYW1ldGVyGjcKBlNjYWxhchItCglk",
            "YXRhX3R5cGUYASABKA4yGi5vbm54LlRlbnNvclByb3RvLkRhdGFUeXBlGjQK",
            "CFNlcXVlbmNlEigKCWVsZW1fdHlwZRgBIAEoCzIVLkxvdHVzdk5leHQuVHlw",
            "ZVByb3RvGjEKBVR1cGxlEigKCWVsZW1fdHlwZRgBIAMoCzIVLkxvdHVzdk5l",
            "eHQuVHlwZVByb3RvGlIKBlJlY29yZBIOCgZkb21haW4YASABKAkSDAoEbmFt",
            "ZRgCIAEoCRIqCgZmaWVsZHMYAyADKAsyGi5Mb3R1c3ZOZXh0LlZhbHVlSW5m",
            "b1Byb3RvGiYKBk9wYXF1ZRIOCgZkb21haW4YASABKAkSDAoEbmFtZRgCIAEo",
            "CRqYAQoMU3BhcnNlVGVuc29yEi0KCWVsZW1fdHlwZRgBIAEoDjIaLm9ubngu",
            "VGVuc29yUHJvdG8uRGF0YVR5cGUSJQoFc2hhcGUYAiABKAsyFi5vbm54LlRl",
            "bnNvclNoYXBlUHJvdG8SMgoFcGFyYW0YZCABKAsyIy5Mb3R1c3ZOZXh0LlR5",
            "cGVQcm90by5UeXBlUGFyYW1ldGVyGjQKCE51bGxhYmxlEigKCWJhc2VfdHlw",
            "ZRgBIAEoCzIVLkxvdHVzdk5leHQuVHlwZVByb3RvGl4KA01hcBIsCghrZXlf",
            "dHlwZRgBIAEoDjIaLm9ubnguVGVuc29yUHJvdG8uRGF0YVR5cGUSKQoKdmFs",
            "dWVfdHlwZRgCIAEoCzIVLkxvdHVzdk5leHQuVHlwZVByb3RvGroCChJUeXBl",
            "UmVmZXJlbmNlUHJvdG8SEQoJcmVmZXJlbmNlGAEgASgJElEKDXR5cGVfYmlu",
            "ZGluZ3MYAiADKAsyOi5Mb3R1c3ZOZXh0LlR5cGVQcm90by5UeXBlUmVmZXJl",
            "bmNlUHJvdG8uVHlwZUJpbmRpbmdzRW50cnkSUwoOc2hhcGVfYmluZGluZ3MY",
            "AyADKAsyOy5Mb3R1c3ZOZXh0LlR5cGVQcm90by5UeXBlUmVmZXJlbmNlUHJv",
            "dG8uU2hhcGVCaW5kaW5nc0VudHJ5GjMKEVR5cGVCaW5kaW5nc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaNAoSU2hhcGVCaW5kaW5n",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoBDoCOAEaIgoNVHlw",
            "ZVBhcmFtZXRlchIRCglwYXJhbWV0ZXIYASABKAkadAoSUGFyYW1ldGVyRGVj",
            "bFByb3RvEgwKBG5hbWUYASABKAkSIwoEdHlwZRgCIAEoCzIVLkxvdHVzdk5l",
            "eHQuVHlwZVByb3RvEhIKCmRvY19zdHJpbmcYAyABKAkSEAoIdmFyaWFkaWMY",
            "ZCABKAhKBQhuEMkBGvQBChJTaWduYXR1cmVEZWNsUHJvdG8SPgoMaW5wdXRf",
            "cGFyYW1zGAEgAygLMiguTG90dXN2TmV4dC5UeXBlUHJvdG8uUGFyYW1ldGVy",
            "RGVjbFByb3RvEj8KDW91dHB1dF9wYXJhbXMYAiADKAsyKC5Mb3R1c3ZOZXh0",
            "LlR5cGVQcm90by5QYXJhbWV0ZXJEZWNsUHJvdG8SQgoQaW5wdXRfYXR0cmli",
            "dXRlcxgDIAMoCzIoLkxvdHVzdk5leHQuVHlwZVByb3RvLlBhcmFtZXRlckRl",
            "Y2xQcm90bxISCgpkb2Nfc3RyaW5nGAQgASgJSgUIbhDJAUIHCgV2YWx1ZUoF",
            "CG4QyQFCE6oCEExvdHVzdk5leHQuVHlwZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ONNX.OnnxMlReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.ValueInfoProto), global::LotusvNext.Types.ValueInfoProto.Parser, new[]{ "Name", "Type", "DocString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto), global::LotusvNext.Types.TypeProto.Parser, new[]{ "TensorType", "SequenceType", "MapType", "TupleType", "OpaqueType", "SparseType", "RecordType", "NullableType", "ScalarType", "TypeReference", "TypeParameter", "FunctionType", "Scalar" }, new[]{ "Value" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.Tensor), global::LotusvNext.Types.TypeProto.Types.Tensor.Parser, new[]{ "ElemType", "Shape", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.Scalar), global::LotusvNext.Types.TypeProto.Types.Scalar.Parser, new[]{ "DataType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.Sequence), global::LotusvNext.Types.TypeProto.Types.Sequence.Parser, new[]{ "ElemType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.Tuple), global::LotusvNext.Types.TypeProto.Types.Tuple.Parser, new[]{ "ElemType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.Record), global::LotusvNext.Types.TypeProto.Types.Record.Parser, new[]{ "Domain", "Name", "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.Opaque), global::LotusvNext.Types.TypeProto.Types.Opaque.Parser, new[]{ "Domain", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.SparseTensor), global::LotusvNext.Types.TypeProto.Types.SparseTensor.Parser, new[]{ "ElemType", "Shape", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.Nullable), global::LotusvNext.Types.TypeProto.Types.Nullable.Parser, new[]{ "BaseType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.Map), global::LotusvNext.Types.TypeProto.Types.Map.Parser, new[]{ "KeyType", "ValueType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.TypeReferenceProto), global::LotusvNext.Types.TypeProto.Types.TypeReferenceProto.Parser, new[]{ "Reference", "TypeBindings", "ShapeBindings" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.TypeParameter), global::LotusvNext.Types.TypeProto.Types.TypeParameter.Parser, new[]{ "Parameter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto), global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto.Parser, new[]{ "Name", "Type", "DocString", "Variadic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LotusvNext.Types.TypeProto.Types.SignatureDeclProto), global::LotusvNext.Types.TypeProto.Types.SignatureDeclProto.Parser, new[]{ "InputParams", "OutputParams", "InputAttributes", "DocString" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Defines information on value, including the name, the type, and
  /// the shape of the value.
  /// </summary>
  public sealed partial class ValueInfoProto : pb::IMessage<ValueInfoProto> {
    private static readonly pb::MessageParser<ValueInfoProto> _parser = new pb::MessageParser<ValueInfoProto>(() => new ValueInfoProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValueInfoProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Types.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueInfoProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueInfoProto(ValueInfoProto other) : this() {
      name_ = other.name_;
      Type = other.type_ != null ? other.Type.Clone() : null;
      docString_ = other.docString_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueInfoProto Clone() {
      return new ValueInfoProto(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// This field MUST be present in this version of the IR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::LotusvNext.Types.TypeProto type_;
    /// <summary>
    /// This field MUST be present in this version of the IR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "doc_string" field.</summary>
    public const int DocStringFieldNumber = 3;
    private string docString_ = "";
    /// <summary>
    /// An human-readable documentation for this node in the graph.
    /// This text MAY contain Markdown markup that conforms to http://commonmark.org/.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DocString {
      get { return docString_; }
      set {
        docString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValueInfoProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValueInfoProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (DocString != other.DocString) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (DocString.Length != 0) hash ^= DocString.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (DocString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DocString);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (DocString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DocString);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValueInfoProto other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::LotusvNext.Types.TypeProto();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.DocString.Length != 0) {
        DocString = other.DocString;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (type_ == null) {
              type_ = new global::LotusvNext.Types.TypeProto();
            }
            input.ReadMessage(type_);
            break;
          }
          case 26: {
            DocString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This is an extension of the LotusIR type definition. New properties
  /// start at 100.
  /// </summary>
  public sealed partial class TypeProto : pb::IMessage<TypeProto> {
    private static readonly pb::MessageParser<TypeProto> _parser = new pb::MessageParser<TypeProto>(() => new TypeProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LotusvNext.Types.TypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeProto(TypeProto other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.TensorType:
          TensorType = other.TensorType.Clone();
          break;
        case ValueOneofCase.SequenceType:
          SequenceType = other.SequenceType.Clone();
          break;
        case ValueOneofCase.MapType:
          MapType = other.MapType.Clone();
          break;
        case ValueOneofCase.TupleType:
          TupleType = other.TupleType.Clone();
          break;
        case ValueOneofCase.OpaqueType:
          OpaqueType = other.OpaqueType.Clone();
          break;
        case ValueOneofCase.SparseType:
          SparseType = other.SparseType.Clone();
          break;
        case ValueOneofCase.RecordType:
          RecordType = other.RecordType.Clone();
          break;
        case ValueOneofCase.NullableType:
          NullableType = other.NullableType.Clone();
          break;
        case ValueOneofCase.ScalarType:
          ScalarType = other.ScalarType.Clone();
          break;
        case ValueOneofCase.TypeReference:
          TypeReference = other.TypeReference.Clone();
          break;
        case ValueOneofCase.TypeParameter:
          TypeParameter = other.TypeParameter.Clone();
          break;
        case ValueOneofCase.FunctionType:
          FunctionType = other.FunctionType.Clone();
          break;
        case ValueOneofCase.Scalar:
          Scalar = other.Scalar;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeProto Clone() {
      return new TypeProto(this);
    }

    /// <summary>Field number for the "tensor_type" field.</summary>
    public const int TensorTypeFieldNumber = 1;
    /// <summary>
    /// The type of a tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Tensor TensorType {
      get { return valueCase_ == ValueOneofCase.TensorType ? (global::LotusvNext.Types.TypeProto.Types.Tensor) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.TensorType;
      }
    }

    /// <summary>Field number for the "sequence_type" field.</summary>
    public const int SequenceTypeFieldNumber = 4;
    /// <summary>
    /// The type of a sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Sequence SequenceType {
      get { return valueCase_ == ValueOneofCase.SequenceType ? (global::LotusvNext.Types.TypeProto.Types.Sequence) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SequenceType;
      }
    }

    /// <summary>Field number for the "map_type" field.</summary>
    public const int MapTypeFieldNumber = 5;
    /// <summary>
    /// The type of a map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Map MapType {
      get { return valueCase_ == ValueOneofCase.MapType ? (global::LotusvNext.Types.TypeProto.Types.Map) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.MapType;
      }
    }

    /// <summary>Field number for the "tuple_type" field.</summary>
    public const int TupleTypeFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Tuple TupleType {
      get { return valueCase_ == ValueOneofCase.TupleType ? (global::LotusvNext.Types.TypeProto.Types.Tuple) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.TupleType;
      }
    }

    /// <summary>Field number for the "opaque_type" field.</summary>
    public const int OpaqueTypeFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Opaque OpaqueType {
      get { return valueCase_ == ValueOneofCase.OpaqueType ? (global::LotusvNext.Types.TypeProto.Types.Opaque) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.OpaqueType;
      }
    }

    /// <summary>Field number for the "sparse_type" field.</summary>
    public const int SparseTypeFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.SparseTensor SparseType {
      get { return valueCase_ == ValueOneofCase.SparseType ? (global::LotusvNext.Types.TypeProto.Types.SparseTensor) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SparseType;
      }
    }

    /// <summary>Field number for the "record_type" field.</summary>
    public const int RecordTypeFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Record RecordType {
      get { return valueCase_ == ValueOneofCase.RecordType ? (global::LotusvNext.Types.TypeProto.Types.Record) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.RecordType;
      }
    }

    /// <summary>Field number for the "nullable_type" field.</summary>
    public const int NullableTypeFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Nullable NullableType {
      get { return valueCase_ == ValueOneofCase.NullableType ? (global::LotusvNext.Types.TypeProto.Types.Nullable) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.NullableType;
      }
    }

    /// <summary>Field number for the "scalar_type" field.</summary>
    public const int ScalarTypeFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.Scalar ScalarType {
      get { return valueCase_ == ValueOneofCase.ScalarType ? (global::LotusvNext.Types.TypeProto.Types.Scalar) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.ScalarType;
      }
    }

    /// <summary>Field number for the "type_reference" field.</summary>
    public const int TypeReferenceFieldNumber = 100;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.TypeReferenceProto TypeReference {
      get { return valueCase_ == ValueOneofCase.TypeReference ? (global::LotusvNext.Types.TypeProto.Types.TypeReferenceProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.TypeReference;
      }
    }

    /// <summary>Field number for the "type_parameter" field.</summary>
    public const int TypeParameterFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.TypeParameter TypeParameter {
      get { return valueCase_ == ValueOneofCase.TypeParameter ? (global::LotusvNext.Types.TypeProto.Types.TypeParameter) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.TypeParameter;
      }
    }

    /// <summary>Field number for the "function_type" field.</summary>
    public const int FunctionTypeFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LotusvNext.Types.TypeProto.Types.SignatureDeclProto FunctionType {
      get { return valueCase_ == ValueOneofCase.FunctionType ? (global::LotusvNext.Types.TypeProto.Types.SignatureDeclProto) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.FunctionType;
      }
    }

    /// <summary>Field number for the "scalar" field.</summary>
    public const int ScalarFieldNumber = 103;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ONNX.TensorProto.Types.DataType Scalar {
      get { return valueCase_ == ValueOneofCase.Scalar ? (global::ONNX.TensorProto.Types.DataType) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Scalar;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      TensorType = 1,
      SequenceType = 4,
      MapType = 5,
      TupleType = 7,
      OpaqueType = 8,
      SparseType = 9,
      RecordType = 10,
      NullableType = 11,
      ScalarType = 12,
      TypeReference = 100,
      TypeParameter = 101,
      FunctionType = 102,
      Scalar = 103,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TensorType, other.TensorType)) return false;
      if (!object.Equals(SequenceType, other.SequenceType)) return false;
      if (!object.Equals(MapType, other.MapType)) return false;
      if (!object.Equals(TupleType, other.TupleType)) return false;
      if (!object.Equals(OpaqueType, other.OpaqueType)) return false;
      if (!object.Equals(SparseType, other.SparseType)) return false;
      if (!object.Equals(RecordType, other.RecordType)) return false;
      if (!object.Equals(NullableType, other.NullableType)) return false;
      if (!object.Equals(ScalarType, other.ScalarType)) return false;
      if (!object.Equals(TypeReference, other.TypeReference)) return false;
      if (!object.Equals(TypeParameter, other.TypeParameter)) return false;
      if (!object.Equals(FunctionType, other.FunctionType)) return false;
      if (Scalar != other.Scalar) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.TensorType) hash ^= TensorType.GetHashCode();
      if (valueCase_ == ValueOneofCase.SequenceType) hash ^= SequenceType.GetHashCode();
      if (valueCase_ == ValueOneofCase.MapType) hash ^= MapType.GetHashCode();
      if (valueCase_ == ValueOneofCase.TupleType) hash ^= TupleType.GetHashCode();
      if (valueCase_ == ValueOneofCase.OpaqueType) hash ^= OpaqueType.GetHashCode();
      if (valueCase_ == ValueOneofCase.SparseType) hash ^= SparseType.GetHashCode();
      if (valueCase_ == ValueOneofCase.RecordType) hash ^= RecordType.GetHashCode();
      if (valueCase_ == ValueOneofCase.NullableType) hash ^= NullableType.GetHashCode();
      if (valueCase_ == ValueOneofCase.ScalarType) hash ^= ScalarType.GetHashCode();
      if (valueCase_ == ValueOneofCase.TypeReference) hash ^= TypeReference.GetHashCode();
      if (valueCase_ == ValueOneofCase.TypeParameter) hash ^= TypeParameter.GetHashCode();
      if (valueCase_ == ValueOneofCase.FunctionType) hash ^= FunctionType.GetHashCode();
      if (valueCase_ == ValueOneofCase.Scalar) hash ^= Scalar.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.TensorType) {
        output.WriteRawTag(10);
        output.WriteMessage(TensorType);
      }
      if (valueCase_ == ValueOneofCase.SequenceType) {
        output.WriteRawTag(34);
        output.WriteMessage(SequenceType);
      }
      if (valueCase_ == ValueOneofCase.MapType) {
        output.WriteRawTag(42);
        output.WriteMessage(MapType);
      }
      if (valueCase_ == ValueOneofCase.TupleType) {
        output.WriteRawTag(58);
        output.WriteMessage(TupleType);
      }
      if (valueCase_ == ValueOneofCase.OpaqueType) {
        output.WriteRawTag(66);
        output.WriteMessage(OpaqueType);
      }
      if (valueCase_ == ValueOneofCase.SparseType) {
        output.WriteRawTag(74);
        output.WriteMessage(SparseType);
      }
      if (valueCase_ == ValueOneofCase.RecordType) {
        output.WriteRawTag(82);
        output.WriteMessage(RecordType);
      }
      if (valueCase_ == ValueOneofCase.NullableType) {
        output.WriteRawTag(90);
        output.WriteMessage(NullableType);
      }
      if (valueCase_ == ValueOneofCase.ScalarType) {
        output.WriteRawTag(98);
        output.WriteMessage(ScalarType);
      }
      if (valueCase_ == ValueOneofCase.TypeReference) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(TypeReference);
      }
      if (valueCase_ == ValueOneofCase.TypeParameter) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(TypeParameter);
      }
      if (valueCase_ == ValueOneofCase.FunctionType) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(FunctionType);
      }
      if (valueCase_ == ValueOneofCase.Scalar) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) Scalar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.TensorType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TensorType);
      }
      if (valueCase_ == ValueOneofCase.SequenceType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SequenceType);
      }
      if (valueCase_ == ValueOneofCase.MapType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapType);
      }
      if (valueCase_ == ValueOneofCase.TupleType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TupleType);
      }
      if (valueCase_ == ValueOneofCase.OpaqueType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpaqueType);
      }
      if (valueCase_ == ValueOneofCase.SparseType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SparseType);
      }
      if (valueCase_ == ValueOneofCase.RecordType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecordType);
      }
      if (valueCase_ == ValueOneofCase.NullableType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NullableType);
      }
      if (valueCase_ == ValueOneofCase.ScalarType) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalarType);
      }
      if (valueCase_ == ValueOneofCase.TypeReference) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TypeReference);
      }
      if (valueCase_ == ValueOneofCase.TypeParameter) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TypeParameter);
      }
      if (valueCase_ == ValueOneofCase.FunctionType) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FunctionType);
      }
      if (valueCase_ == ValueOneofCase.Scalar) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Scalar);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeProto other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.TensorType:
          if (TensorType == null) {
            TensorType = new global::LotusvNext.Types.TypeProto.Types.Tensor();
          }
          TensorType.MergeFrom(other.TensorType);
          break;
        case ValueOneofCase.SequenceType:
          if (SequenceType == null) {
            SequenceType = new global::LotusvNext.Types.TypeProto.Types.Sequence();
          }
          SequenceType.MergeFrom(other.SequenceType);
          break;
        case ValueOneofCase.MapType:
          if (MapType == null) {
            MapType = new global::LotusvNext.Types.TypeProto.Types.Map();
          }
          MapType.MergeFrom(other.MapType);
          break;
        case ValueOneofCase.TupleType:
          if (TupleType == null) {
            TupleType = new global::LotusvNext.Types.TypeProto.Types.Tuple();
          }
          TupleType.MergeFrom(other.TupleType);
          break;
        case ValueOneofCase.OpaqueType:
          if (OpaqueType == null) {
            OpaqueType = new global::LotusvNext.Types.TypeProto.Types.Opaque();
          }
          OpaqueType.MergeFrom(other.OpaqueType);
          break;
        case ValueOneofCase.SparseType:
          if (SparseType == null) {
            SparseType = new global::LotusvNext.Types.TypeProto.Types.SparseTensor();
          }
          SparseType.MergeFrom(other.SparseType);
          break;
        case ValueOneofCase.RecordType:
          if (RecordType == null) {
            RecordType = new global::LotusvNext.Types.TypeProto.Types.Record();
          }
          RecordType.MergeFrom(other.RecordType);
          break;
        case ValueOneofCase.NullableType:
          if (NullableType == null) {
            NullableType = new global::LotusvNext.Types.TypeProto.Types.Nullable();
          }
          NullableType.MergeFrom(other.NullableType);
          break;
        case ValueOneofCase.ScalarType:
          if (ScalarType == null) {
            ScalarType = new global::LotusvNext.Types.TypeProto.Types.Scalar();
          }
          ScalarType.MergeFrom(other.ScalarType);
          break;
        case ValueOneofCase.TypeReference:
          if (TypeReference == null) {
            TypeReference = new global::LotusvNext.Types.TypeProto.Types.TypeReferenceProto();
          }
          TypeReference.MergeFrom(other.TypeReference);
          break;
        case ValueOneofCase.TypeParameter:
          if (TypeParameter == null) {
            TypeParameter = new global::LotusvNext.Types.TypeProto.Types.TypeParameter();
          }
          TypeParameter.MergeFrom(other.TypeParameter);
          break;
        case ValueOneofCase.FunctionType:
          if (FunctionType == null) {
            FunctionType = new global::LotusvNext.Types.TypeProto.Types.SignatureDeclProto();
          }
          FunctionType.MergeFrom(other.FunctionType);
          break;
        case ValueOneofCase.Scalar:
          Scalar = other.Scalar;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::LotusvNext.Types.TypeProto.Types.Tensor subBuilder = new global::LotusvNext.Types.TypeProto.Types.Tensor();
            if (valueCase_ == ValueOneofCase.TensorType) {
              subBuilder.MergeFrom(TensorType);
            }
            input.ReadMessage(subBuilder);
            TensorType = subBuilder;
            break;
          }
          case 34: {
            global::LotusvNext.Types.TypeProto.Types.Sequence subBuilder = new global::LotusvNext.Types.TypeProto.Types.Sequence();
            if (valueCase_ == ValueOneofCase.SequenceType) {
              subBuilder.MergeFrom(SequenceType);
            }
            input.ReadMessage(subBuilder);
            SequenceType = subBuilder;
            break;
          }
          case 42: {
            global::LotusvNext.Types.TypeProto.Types.Map subBuilder = new global::LotusvNext.Types.TypeProto.Types.Map();
            if (valueCase_ == ValueOneofCase.MapType) {
              subBuilder.MergeFrom(MapType);
            }
            input.ReadMessage(subBuilder);
            MapType = subBuilder;
            break;
          }
          case 58: {
            global::LotusvNext.Types.TypeProto.Types.Tuple subBuilder = new global::LotusvNext.Types.TypeProto.Types.Tuple();
            if (valueCase_ == ValueOneofCase.TupleType) {
              subBuilder.MergeFrom(TupleType);
            }
            input.ReadMessage(subBuilder);
            TupleType = subBuilder;
            break;
          }
          case 66: {
            global::LotusvNext.Types.TypeProto.Types.Opaque subBuilder = new global::LotusvNext.Types.TypeProto.Types.Opaque();
            if (valueCase_ == ValueOneofCase.OpaqueType) {
              subBuilder.MergeFrom(OpaqueType);
            }
            input.ReadMessage(subBuilder);
            OpaqueType = subBuilder;
            break;
          }
          case 74: {
            global::LotusvNext.Types.TypeProto.Types.SparseTensor subBuilder = new global::LotusvNext.Types.TypeProto.Types.SparseTensor();
            if (valueCase_ == ValueOneofCase.SparseType) {
              subBuilder.MergeFrom(SparseType);
            }
            input.ReadMessage(subBuilder);
            SparseType = subBuilder;
            break;
          }
          case 82: {
            global::LotusvNext.Types.TypeProto.Types.Record subBuilder = new global::LotusvNext.Types.TypeProto.Types.Record();
            if (valueCase_ == ValueOneofCase.RecordType) {
              subBuilder.MergeFrom(RecordType);
            }
            input.ReadMessage(subBuilder);
            RecordType = subBuilder;
            break;
          }
          case 90: {
            global::LotusvNext.Types.TypeProto.Types.Nullable subBuilder = new global::LotusvNext.Types.TypeProto.Types.Nullable();
            if (valueCase_ == ValueOneofCase.NullableType) {
              subBuilder.MergeFrom(NullableType);
            }
            input.ReadMessage(subBuilder);
            NullableType = subBuilder;
            break;
          }
          case 98: {
            global::LotusvNext.Types.TypeProto.Types.Scalar subBuilder = new global::LotusvNext.Types.TypeProto.Types.Scalar();
            if (valueCase_ == ValueOneofCase.ScalarType) {
              subBuilder.MergeFrom(ScalarType);
            }
            input.ReadMessage(subBuilder);
            ScalarType = subBuilder;
            break;
          }
          case 802: {
            global::LotusvNext.Types.TypeProto.Types.TypeReferenceProto subBuilder = new global::LotusvNext.Types.TypeProto.Types.TypeReferenceProto();
            if (valueCase_ == ValueOneofCase.TypeReference) {
              subBuilder.MergeFrom(TypeReference);
            }
            input.ReadMessage(subBuilder);
            TypeReference = subBuilder;
            break;
          }
          case 810: {
            global::LotusvNext.Types.TypeProto.Types.TypeParameter subBuilder = new global::LotusvNext.Types.TypeProto.Types.TypeParameter();
            if (valueCase_ == ValueOneofCase.TypeParameter) {
              subBuilder.MergeFrom(TypeParameter);
            }
            input.ReadMessage(subBuilder);
            TypeParameter = subBuilder;
            break;
          }
          case 818: {
            global::LotusvNext.Types.TypeProto.Types.SignatureDeclProto subBuilder = new global::LotusvNext.Types.TypeProto.Types.SignatureDeclProto();
            if (valueCase_ == ValueOneofCase.FunctionType) {
              subBuilder.MergeFrom(FunctionType);
            }
            input.ReadMessage(subBuilder);
            FunctionType = subBuilder;
            break;
          }
          case 824: {
            value_ = input.ReadEnum();
            valueCase_ = ValueOneofCase.Scalar;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TypeProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Tensor : pb::IMessage<Tensor> {
        private static readonly pb::MessageParser<Tensor> _parser = new pb::MessageParser<Tensor>(() => new Tensor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tensor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tensor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tensor(Tensor other) : this() {
          elemType_ = other.elemType_;
          Shape = other.shape_ != null ? other.Shape.Clone() : null;
          Param = other.param_ != null ? other.Param.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tensor Clone() {
          return new Tensor(this);
        }

        /// <summary>Field number for the "elem_type" field.</summary>
        public const int ElemTypeFieldNumber = 1;
        private global::ONNX.TensorProto.Types.DataType elemType_ = 0;
        /// <summary>
        /// This field MUST NOT have the value of UNDEFINED
        /// This field MUST be present for this version of the IR.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ONNX.TensorProto.Types.DataType ElemType {
          get { return elemType_; }
          set {
            elemType_ = value;
          }
        }

        /// <summary>Field number for the "shape" field.</summary>
        public const int ShapeFieldNumber = 2;
        private global::ONNX.TensorShapeProto shape_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ONNX.TensorShapeProto Shape {
          get { return shape_; }
          set {
            shape_ = value;
          }
        }

        /// <summary>Field number for the "param" field.</summary>
        public const int ParamFieldNumber = 100;
        private global::LotusvNext.Types.TypeProto.Types.TypeParameter param_;
        /// <summary>
        /// If this is present, then elem_type should be UNDEFINED.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Types.TypeProto.Types.TypeParameter Param {
          get { return param_; }
          set {
            param_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tensor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tensor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ElemType != other.ElemType) return false;
          if (!object.Equals(Shape, other.Shape)) return false;
          if (!object.Equals(Param, other.Param)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ElemType != 0) hash ^= ElemType.GetHashCode();
          if (shape_ != null) hash ^= Shape.GetHashCode();
          if (param_ != null) hash ^= Param.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ElemType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ElemType);
          }
          if (shape_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Shape);
          }
          if (param_ != null) {
            output.WriteRawTag(162, 6);
            output.WriteMessage(Param);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ElemType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ElemType);
          }
          if (shape_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
          }
          if (param_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Param);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tensor other) {
          if (other == null) {
            return;
          }
          if (other.ElemType != 0) {
            ElemType = other.ElemType;
          }
          if (other.shape_ != null) {
            if (shape_ == null) {
              shape_ = new global::ONNX.TensorShapeProto();
            }
            Shape.MergeFrom(other.Shape);
          }
          if (other.param_ != null) {
            if (param_ == null) {
              param_ = new global::LotusvNext.Types.TypeProto.Types.TypeParameter();
            }
            Param.MergeFrom(other.Param);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                elemType_ = (global::ONNX.TensorProto.Types.DataType) input.ReadEnum();
                break;
              }
              case 18: {
                if (shape_ == null) {
                  shape_ = new global::ONNX.TensorShapeProto();
                }
                input.ReadMessage(shape_);
                break;
              }
              case 802: {
                if (param_ == null) {
                  param_ = new global::LotusvNext.Types.TypeProto.Types.TypeParameter();
                }
                input.ReadMessage(param_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Scalar : pb::IMessage<Scalar> {
        private static readonly pb::MessageParser<Scalar> _parser = new pb::MessageParser<Scalar>(() => new Scalar());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Scalar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Scalar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Scalar(Scalar other) : this() {
          dataType_ = other.dataType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Scalar Clone() {
          return new Scalar(this);
        }

        /// <summary>Field number for the "data_type" field.</summary>
        public const int DataTypeFieldNumber = 1;
        private global::ONNX.TensorProto.Types.DataType dataType_ = 0;
        /// <summary>
        /// This field MUST NOT have the value of UNDEFINED 
        /// This field MUST be present for this version of the IR. 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ONNX.TensorProto.Types.DataType DataType {
          get { return dataType_; }
          set {
            dataType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Scalar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Scalar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DataType != other.DataType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DataType != 0) hash ^= DataType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DataType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) DataType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DataType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Scalar other) {
          if (other == null) {
            return;
          }
          if (other.DataType != 0) {
            DataType = other.DataType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                dataType_ = (global::ONNX.TensorProto.Types.DataType) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// repeated T
      /// </summary>
      public sealed partial class Sequence : pb::IMessage<Sequence> {
        private static readonly pb::MessageParser<Sequence> _parser = new pb::MessageParser<Sequence>(() => new Sequence());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Sequence> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sequence() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sequence(Sequence other) : this() {
          ElemType = other.elemType_ != null ? other.ElemType.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Sequence Clone() {
          return new Sequence(this);
        }

        /// <summary>Field number for the "elem_type" field.</summary>
        public const int ElemTypeFieldNumber = 1;
        private global::LotusvNext.Types.TypeProto elemType_;
        /// <summary>
        /// The type and optional shape of each element of the sequence.
        /// This field MUST be present for this version of the IR.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Types.TypeProto ElemType {
          get { return elemType_; }
          set {
            elemType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Sequence);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Sequence other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ElemType, other.ElemType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (elemType_ != null) hash ^= ElemType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (elemType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ElemType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (elemType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElemType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Sequence other) {
          if (other == null) {
            return;
          }
          if (other.elemType_ != null) {
            if (elemType_ == null) {
              elemType_ = new global::LotusvNext.Types.TypeProto();
            }
            ElemType.MergeFrom(other.ElemType);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (elemType_ == null) {
                  elemType_ = new global::LotusvNext.Types.TypeProto();
                }
                input.ReadMessage(elemType_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Tuple : pb::IMessage<Tuple> {
        private static readonly pb::MessageParser<Tuple> _parser = new pb::MessageParser<Tuple>(() => new Tuple());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tuple> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple(Tuple other) : this() {
          elemType_ = other.elemType_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple Clone() {
          return new Tuple(this);
        }

        /// <summary>Field number for the "elem_type" field.</summary>
        public const int ElemTypeFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LotusvNext.Types.TypeProto> _repeated_elemType_codec
            = pb::FieldCodec.ForMessage(10, global::LotusvNext.Types.TypeProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Types.TypeProto> elemType_ = new pbc::RepeatedField<global::LotusvNext.Types.TypeProto>();
        /// <summary>
        /// The element types of the tuple. 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Types.TypeProto> ElemType {
          get { return elemType_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tuple);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tuple other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!elemType_.Equals(other.elemType_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= elemType_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          elemType_.WriteTo(output, _repeated_elemType_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += elemType_.CalculateSize(_repeated_elemType_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tuple other) {
          if (other == null) {
            return;
          }
          elemType_.Add(other.elemType_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                elemType_.AddEntriesFrom(input, _repeated_elemType_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Record : pb::IMessage<Record> {
        private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Record> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record(Record other) : this() {
          domain_ = other.domain_;
          name_ = other.name_;
          fields_ = other.fields_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record Clone() {
          return new Record(this);
        }

        /// <summary>Field number for the "domain" field.</summary>
        public const int DomainFieldNumber = 1;
        private string domain_ = "";
        /// <summary>
        /// When missing, the domain is the same as the model's. 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Domain {
          get { return domain_; }
          set {
            domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// The name is required for this version of the IR.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "fields" field.</summary>
        public const int FieldsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::LotusvNext.Types.ValueInfoProto> _repeated_fields_codec
            = pb::FieldCodec.ForMessage(26, global::LotusvNext.Types.ValueInfoProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Types.ValueInfoProto> fields_ = new pbc::RepeatedField<global::LotusvNext.Types.ValueInfoProto>();
        /// <summary>
        /// The name and type of each field is described by a ValueInfoProto. 
        /// The field names must be unique. 
        /// This field MUST be present for this version of the IR. 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Types.ValueInfoProto> Fields {
          get { return fields_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Record);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Record other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Domain != other.Domain) return false;
          if (Name != other.Name) return false;
          if(!fields_.Equals(other.fields_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Domain.Length != 0) hash ^= Domain.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= fields_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Domain.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Domain);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          fields_.WriteTo(output, _repeated_fields_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Domain.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += fields_.CalculateSize(_repeated_fields_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Record other) {
          if (other == null) {
            return;
          }
          if (other.Domain.Length != 0) {
            Domain = other.Domain;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          fields_.Add(other.fields_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Domain = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                fields_.AddEntriesFrom(input, _repeated_fields_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Used to define any number of specific, named typed, that defy
      /// definition through other means, but values of which pass through
      /// code opaquely.
      /// </summary>
      public sealed partial class Opaque : pb::IMessage<Opaque> {
        private static readonly pb::MessageParser<Opaque> _parser = new pb::MessageParser<Opaque>(() => new Opaque());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Opaque> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Opaque() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Opaque(Opaque other) : this() {
          domain_ = other.domain_;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Opaque Clone() {
          return new Opaque(this);
        }

        /// <summary>Field number for the "domain" field.</summary>
        public const int DomainFieldNumber = 1;
        private string domain_ = "";
        /// <summary>
        /// When missing, the domain is the same as the model's. 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Domain {
          get { return domain_; }
          set {
            domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// The name is optional but significant when provided. 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Opaque);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Opaque other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Domain != other.Domain) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Domain.Length != 0) hash ^= Domain.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Domain.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Domain);
          }
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Domain.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Opaque other) {
          if (other == null) {
            return;
          }
          if (other.Domain.Length != 0) {
            Domain = other.Domain;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Domain = input.ReadString();
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SparseTensor : pb::IMessage<SparseTensor> {
        private static readonly pb::MessageParser<SparseTensor> _parser = new pb::MessageParser<SparseTensor>(() => new SparseTensor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SparseTensor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparseTensor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparseTensor(SparseTensor other) : this() {
          elemType_ = other.elemType_;
          Shape = other.shape_ != null ? other.Shape.Clone() : null;
          Param = other.param_ != null ? other.Param.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SparseTensor Clone() {
          return new SparseTensor(this);
        }

        /// <summary>Field number for the "elem_type" field.</summary>
        public const int ElemTypeFieldNumber = 1;
        private global::ONNX.TensorProto.Types.DataType elemType_ = 0;
        /// <summary>
        /// This field MUST NOT have the value of UNDEFINED
        /// This field MUST be present for this version of the IR.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ONNX.TensorProto.Types.DataType ElemType {
          get { return elemType_; }
          set {
            elemType_ = value;
          }
        }

        /// <summary>Field number for the "shape" field.</summary>
        public const int ShapeFieldNumber = 2;
        private global::ONNX.TensorShapeProto shape_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ONNX.TensorShapeProto Shape {
          get { return shape_; }
          set {
            shape_ = value;
          }
        }

        /// <summary>Field number for the "param" field.</summary>
        public const int ParamFieldNumber = 100;
        private global::LotusvNext.Types.TypeProto.Types.TypeParameter param_;
        /// <summary>
        /// If this is present, then elem_type should be UNDEFINED.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Types.TypeProto.Types.TypeParameter Param {
          get { return param_; }
          set {
            param_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SparseTensor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SparseTensor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ElemType != other.ElemType) return false;
          if (!object.Equals(Shape, other.Shape)) return false;
          if (!object.Equals(Param, other.Param)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ElemType != 0) hash ^= ElemType.GetHashCode();
          if (shape_ != null) hash ^= Shape.GetHashCode();
          if (param_ != null) hash ^= Param.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ElemType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) ElemType);
          }
          if (shape_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Shape);
          }
          if (param_ != null) {
            output.WriteRawTag(162, 6);
            output.WriteMessage(Param);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ElemType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ElemType);
          }
          if (shape_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
          }
          if (param_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Param);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SparseTensor other) {
          if (other == null) {
            return;
          }
          if (other.ElemType != 0) {
            ElemType = other.ElemType;
          }
          if (other.shape_ != null) {
            if (shape_ == null) {
              shape_ = new global::ONNX.TensorShapeProto();
            }
            Shape.MergeFrom(other.Shape);
          }
          if (other.param_ != null) {
            if (param_ == null) {
              param_ = new global::LotusvNext.Types.TypeProto.Types.TypeParameter();
            }
            Param.MergeFrom(other.Param);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                elemType_ = (global::ONNX.TensorProto.Types.DataType) input.ReadEnum();
                break;
              }
              case 18: {
                if (shape_ == null) {
                  shape_ = new global::ONNX.TensorShapeProto();
                }
                input.ReadMessage(shape_);
                break;
              }
              case 802: {
                if (param_ == null) {
                  param_ = new global::LotusvNext.Types.TypeProto.Types.TypeParameter();
                }
                input.ReadMessage(param_);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Nullable : pb::IMessage<Nullable> {
        private static readonly pb::MessageParser<Nullable> _parser = new pb::MessageParser<Nullable>(() => new Nullable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Nullable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nullable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nullable(Nullable other) : this() {
          BaseType = other.baseType_ != null ? other.BaseType.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Nullable Clone() {
          return new Nullable(this);
        }

        /// <summary>Field number for the "base_type" field.</summary>
        public const int BaseTypeFieldNumber = 1;
        private global::LotusvNext.Types.TypeProto baseType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Types.TypeProto BaseType {
          get { return baseType_; }
          set {
            baseType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Nullable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Nullable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(BaseType, other.BaseType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (baseType_ != null) hash ^= BaseType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (baseType_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(BaseType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (baseType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Nullable other) {
          if (other == null) {
            return;
          }
          if (other.baseType_ != null) {
            if (baseType_ == null) {
              baseType_ = new global::LotusvNext.Types.TypeProto();
            }
            BaseType.MergeFrom(other.BaseType);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (baseType_ == null) {
                  baseType_ = new global::LotusvNext.Types.TypeProto();
                }
                input.ReadMessage(baseType_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// map&lt;K,V>
      /// </summary>
      public sealed partial class Map : pb::IMessage<Map> {
        private static readonly pb::MessageParser<Map> _parser = new pb::MessageParser<Map>(() => new Map());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Map> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Map() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Map(Map other) : this() {
          keyType_ = other.keyType_;
          ValueType = other.valueType_ != null ? other.ValueType.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Map Clone() {
          return new Map(this);
        }

        /// <summary>Field number for the "key_type" field.</summary>
        public const int KeyTypeFieldNumber = 1;
        private global::ONNX.TensorProto.Types.DataType keyType_ = 0;
        /// <summary>
        /// This field MUST be present for this version of the IR.
        /// This field MUST refer to an integral type ([U]INT{8|16|32|64}) or STRING
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::ONNX.TensorProto.Types.DataType KeyType {
          get { return keyType_; }
          set {
            keyType_ = value;
          }
        }

        /// <summary>Field number for the "value_type" field.</summary>
        public const int ValueTypeFieldNumber = 2;
        private global::LotusvNext.Types.TypeProto valueType_;
        /// <summary>
        /// This field MUST be present for this version of the IR.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Types.TypeProto ValueType {
          get { return valueType_; }
          set {
            valueType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Map);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Map other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (KeyType != other.KeyType) return false;
          if (!object.Equals(ValueType, other.ValueType)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (KeyType != 0) hash ^= KeyType.GetHashCode();
          if (valueType_ != null) hash ^= ValueType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (KeyType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) KeyType);
          }
          if (valueType_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ValueType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (KeyType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyType);
          }
          if (valueType_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValueType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Map other) {
          if (other == null) {
            return;
          }
          if (other.KeyType != 0) {
            KeyType = other.KeyType;
          }
          if (other.valueType_ != null) {
            if (valueType_ == null) {
              valueType_ = new global::LotusvNext.Types.TypeProto();
            }
            ValueType.MergeFrom(other.ValueType);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                keyType_ = (global::ONNX.TensorProto.Types.DataType) input.ReadEnum();
                break;
              }
              case 18: {
                if (valueType_ == null) {
                  valueType_ = new global::LotusvNext.Types.TypeProto();
                }
                input.ReadMessage(valueType_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A type reference represents an alias for a typed declared in the 'types' section of a
      /// model document.
      /// </summary>
      public sealed partial class TypeReferenceProto : pb::IMessage<TypeReferenceProto> {
        private static readonly pb::MessageParser<TypeReferenceProto> _parser = new pb::MessageParser<TypeReferenceProto>(() => new TypeReferenceProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TypeReferenceProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeReferenceProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeReferenceProto(TypeReferenceProto other) : this() {
          reference_ = other.reference_;
          typeBindings_ = other.typeBindings_.Clone();
          shapeBindings_ = other.shapeBindings_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeReferenceProto Clone() {
          return new TypeReferenceProto(this);
        }

        /// <summary>Field number for the "reference" field.</summary>
        public const int ReferenceFieldNumber = 1;
        private string reference_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Reference {
          get { return reference_; }
          set {
            reference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type_bindings" field.</summary>
        public const int TypeBindingsFieldNumber = 2;
        private static readonly pbc::MapField<string, string>.Codec _map_typeBindings_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
        private readonly pbc::MapField<string, string> typeBindings_ = new pbc::MapField<string, string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> TypeBindings {
          get { return typeBindings_; }
        }

        /// <summary>Field number for the "shape_bindings" field.</summary>
        public const int ShapeBindingsFieldNumber = 3;
        private static readonly pbc::MapField<string, ulong>.Codec _map_shapeBindings_codec
            = new pbc::MapField<string, ulong>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForUInt64(16), 26);
        private readonly pbc::MapField<string, ulong> shapeBindings_ = new pbc::MapField<string, ulong>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, ulong> ShapeBindings {
          get { return shapeBindings_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TypeReferenceProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TypeReferenceProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Reference != other.Reference) return false;
          if (!TypeBindings.Equals(other.TypeBindings)) return false;
          if (!ShapeBindings.Equals(other.ShapeBindings)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Reference.Length != 0) hash ^= Reference.GetHashCode();
          hash ^= TypeBindings.GetHashCode();
          hash ^= ShapeBindings.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Reference.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Reference);
          }
          typeBindings_.WriteTo(output, _map_typeBindings_codec);
          shapeBindings_.WriteTo(output, _map_shapeBindings_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Reference.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Reference);
          }
          size += typeBindings_.CalculateSize(_map_typeBindings_codec);
          size += shapeBindings_.CalculateSize(_map_shapeBindings_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TypeReferenceProto other) {
          if (other == null) {
            return;
          }
          if (other.Reference.Length != 0) {
            Reference = other.Reference;
          }
          typeBindings_.Add(other.typeBindings_);
          shapeBindings_.Add(other.shapeBindings_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Reference = input.ReadString();
                break;
              }
              case 18: {
                typeBindings_.AddEntriesFrom(input, _map_typeBindings_codec);
                break;
              }
              case 26: {
                shapeBindings_.AddEntriesFrom(input, _map_shapeBindings_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// A type parameter is used in intrinsic function declarations, denoting a type name that can be
      /// bound to other types at a function call site.
      /// </summary>
      public sealed partial class TypeParameter : pb::IMessage<TypeParameter> {
        private static readonly pb::MessageParser<TypeParameter> _parser = new pb::MessageParser<TypeParameter>(() => new TypeParameter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TypeParameter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeParameter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeParameter(TypeParameter other) : this() {
          parameter_ = other.parameter_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TypeParameter Clone() {
          return new TypeParameter(this);
        }

        /// <summary>Field number for the "parameter" field.</summary>
        public const int ParameterFieldNumber = 1;
        private string parameter_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Parameter {
          get { return parameter_; }
          set {
            parameter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TypeParameter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TypeParameter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Parameter != other.Parameter) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Parameter.Length != 0) hash ^= Parameter.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Parameter.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Parameter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Parameter.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Parameter);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TypeParameter other) {
          if (other == null) {
            return;
          }
          if (other.Parameter.Length != 0) {
            Parameter = other.Parameter;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Parameter = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ParameterDeclProto : pb::IMessage<ParameterDeclProto> {
        private static readonly pb::MessageParser<ParameterDeclProto> _parser = new pb::MessageParser<ParameterDeclProto>(() => new ParameterDeclProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ParameterDeclProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParameterDeclProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParameterDeclProto(ParameterDeclProto other) : this() {
          name_ = other.name_;
          Type = other.type_ != null ? other.Type.Clone() : null;
          docString_ = other.docString_;
          variadic_ = other.variadic_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParameterDeclProto Clone() {
          return new ParameterDeclProto(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::LotusvNext.Types.TypeProto type_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LotusvNext.Types.TypeProto Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "doc_string" field.</summary>
        public const int DocStringFieldNumber = 3;
        private string docString_ = "";
        /// <summary>
        /// An  human-readable documentation for this parameter.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DocString {
          get { return docString_; }
          set {
            docString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "variadic" field.</summary>
        public const int VariadicFieldNumber = 100;
        private bool variadic_;
        /// <summary>
        /// Indicates whether this parameter can take a list of values.
        /// Only applicable to input parameters.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Variadic {
          get { return variadic_; }
          set {
            variadic_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ParameterDeclProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ParameterDeclProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(Type, other.Type)) return false;
          if (DocString != other.DocString) return false;
          if (Variadic != other.Variadic) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (type_ != null) hash ^= Type.GetHashCode();
          if (DocString.Length != 0) hash ^= DocString.GetHashCode();
          if (Variadic != false) hash ^= Variadic.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (type_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Type);
          }
          if (DocString.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(DocString);
          }
          if (Variadic != false) {
            output.WriteRawTag(160, 6);
            output.WriteBool(Variadic);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (type_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (DocString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DocString);
          }
          if (Variadic != false) {
            size += 2 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ParameterDeclProto other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.type_ != null) {
            if (type_ == null) {
              type_ = new global::LotusvNext.Types.TypeProto();
            }
            Type.MergeFrom(other.Type);
          }
          if (other.DocString.Length != 0) {
            DocString = other.DocString;
          }
          if (other.Variadic != false) {
            Variadic = other.Variadic;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (type_ == null) {
                  type_ = new global::LotusvNext.Types.TypeProto();
                }
                input.ReadMessage(type_);
                break;
              }
              case 26: {
                DocString = input.ReadString();
                break;
              }
              case 800: {
                Variadic = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SignatureDeclProto : pb::IMessage<SignatureDeclProto> {
        private static readonly pb::MessageParser<SignatureDeclProto> _parser = new pb::MessageParser<SignatureDeclProto>(() => new SignatureDeclProto());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SignatureDeclProto> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LotusvNext.Types.TypeProto.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignatureDeclProto() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignatureDeclProto(SignatureDeclProto other) : this() {
          inputParams_ = other.inputParams_.Clone();
          outputParams_ = other.outputParams_.Clone();
          inputAttributes_ = other.inputAttributes_.Clone();
          docString_ = other.docString_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignatureDeclProto Clone() {
          return new SignatureDeclProto(this);
        }

        /// <summary>Field number for the "input_params" field.</summary>
        public const int InputParamsFieldNumber = 1;
        private static readonly pb::FieldCodec<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> _repeated_inputParams_codec
            = pb::FieldCodec.ForMessage(10, global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> inputParams_ = new pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto>();
        /// <summary>
        /// The formal input parameters to the operation or function 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> InputParams {
          get { return inputParams_; }
        }

        /// <summary>Field number for the "output_params" field.</summary>
        public const int OutputParamsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> _repeated_outputParams_codec
            = pb::FieldCodec.ForMessage(18, global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> outputParams_ = new pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto>();
        /// <summary>
        /// The formal output parameters to the operation or function 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> OutputParams {
          get { return outputParams_; }
        }

        /// <summary>Field number for the "input_attributes" field.</summary>
        public const int InputAttributesFieldNumber = 3;
        private static readonly pb::FieldCodec<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> _repeated_inputAttributes_codec
            = pb::FieldCodec.ForMessage(26, global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto.Parser);
        private readonly pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> inputAttributes_ = new pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto>();
        /// <summary>
        /// The declaration of expected attributes to the operation or function 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LotusvNext.Types.TypeProto.Types.ParameterDeclProto> InputAttributes {
          get { return inputAttributes_; }
        }

        /// <summary>Field number for the "doc_string" field.</summary>
        public const int DocStringFieldNumber = 4;
        private string docString_ = "";
        /// <summary>
        /// An  human-readable documentation for this signature.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DocString {
          get { return docString_; }
          set {
            docString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SignatureDeclProto);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SignatureDeclProto other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!inputParams_.Equals(other.inputParams_)) return false;
          if(!outputParams_.Equals(other.outputParams_)) return false;
          if(!inputAttributes_.Equals(other.inputAttributes_)) return false;
          if (DocString != other.DocString) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= inputParams_.GetHashCode();
          hash ^= outputParams_.GetHashCode();
          hash ^= inputAttributes_.GetHashCode();
          if (DocString.Length != 0) hash ^= DocString.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          inputParams_.WriteTo(output, _repeated_inputParams_codec);
          outputParams_.WriteTo(output, _repeated_outputParams_codec);
          inputAttributes_.WriteTo(output, _repeated_inputAttributes_codec);
          if (DocString.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(DocString);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += inputParams_.CalculateSize(_repeated_inputParams_codec);
          size += outputParams_.CalculateSize(_repeated_outputParams_codec);
          size += inputAttributes_.CalculateSize(_repeated_inputAttributes_codec);
          if (DocString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DocString);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SignatureDeclProto other) {
          if (other == null) {
            return;
          }
          inputParams_.Add(other.inputParams_);
          outputParams_.Add(other.outputParams_);
          inputAttributes_.Add(other.inputAttributes_);
          if (other.DocString.Length != 0) {
            DocString = other.DocString;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                inputParams_.AddEntriesFrom(input, _repeated_inputParams_codec);
                break;
              }
              case 18: {
                outputParams_.AddEntriesFrom(input, _repeated_outputParams_codec);
                break;
              }
              case 26: {
                inputAttributes_.AddEntriesFrom(input, _repeated_inputAttributes_codec);
                break;
              }
              case 34: {
                DocString = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
